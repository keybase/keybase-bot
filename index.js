!function(Q,t){if("object"==typeof exports&&"object"==typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var F=t();for(var B in F)("object"==typeof exports?exports:Q)[B]=F[B]}}(global,function(){return function(Q){var t={};function F(B){if(t[B])return t[B].exports;var s=t[B]={i:B,l:!1,exports:{}};return Q[B].call(s.exports,s,s.exports,F),s.l=!0,s.exports}return F.m=Q,F.c=t,F.d=function(Q,t,B){F.o(Q,t)||Object.defineProperty(Q,t,{enumerable:!0,get:B})},F.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},F.t=function(Q,t){if(1&t&&(Q=F(Q)),8&t)return Q;if(4&t&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var B=Object.create(null);if(F.r(B),Object.defineProperty(B,"default",{enumerable:!0,value:Q}),2&t&&"string"!=typeof Q)for(var s in Q)F.d(B,s,function(t){return Q[t]}.bind(null,s));return B},F.n=function(Q){var t=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return F.d(t,"a",t),t},F.o=function(Q,t){return Object.prototype.hasOwnProperty.call(Q,t)},F.p="",F(F.s=1)}([function(module,exports){eval('module.exports = require("child_process");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJjaGlsZF9wcm9jZXNzXCI/M2RhNyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiY2hpbGRfcHJvY2Vzc1wiKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///0\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: external "child_process"\nvar external_child_process_ = __webpack_require__(0);\n\n// CONCATENATED MODULE: ./lib/exec-to-json.js\n\n\nvar exec_to_json_execToJson = function execToJson(params) {\n  var stdinBuffer = params.stdinBuffer;\n  var out = null;\n  var outBuffers = [];\n  var child = Object(external_child_process_["spawn"])(params.command, params.args || []);\n\n  if (stdinBuffer) {\n    child.stdin.write(stdinBuffer);\n    child.stdin.end();\n  }\n\n  child.stdout.on(\'data\', function (chunk) {\n    outBuffers.push(chunk);\n  });\n  return new Promise(function (resolve, reject) {\n    child.on(\'close\', function (code) {\n      if (code) {\n        reject(new Error("exited with code ".concat(code)));\n      } else {\n        var stdout = Buffer.concat(outBuffers).toString(\'utf8\');\n\n        try {\n          out = JSON.parse(stdout);\n        } catch (e) {\n          reject(e);\n        }\n      }\n\n      resolve(out);\n    });\n  });\n};\n\n\n// CONCATENATED MODULE: ./lib/keybase-status.js\n\n\n// ----------------------------------------------------------------------------\n// calls back with a JSON object describing the user\'s\n// status with Keybase. For example, status.Username and status.Device.name\n// may be of interest\n// ----------------------------------------------------------------------------\nvar keybase_status_getKeybaseNativeStatusJson = function getKeybaseNativeStatusJson() {\n  return exec_to_json_execToJson({\n    command: \'keybase\',\n    args: [\'status\', \'-j\']\n  });\n}; // ----------------------------------------------------------------------------\n// calls back with just {username, devicename}, if fully logged in and\n// unlocked.\n// ----------------------------------------------------------------------------\n\n\nvar getKeybaseUsernameAndDevicename = function getKeybaseUsernameAndDevicename() {\n  return new Promise(function (resolve, reject) {\n    keybase_status_getKeybaseNativeStatusJson().then(function (status) {\n      if (status && status.Username && status.Device && status.Device.name) {\n        resolve({\n          username: status.Username,\n          devicename: status.Device.name\n        });\n      } else {\n        reject(new Error(\'failed to get username + device name\'));\n      }\n    });\n  });\n};\n\n\n// CONCATENATED MODULE: ./lib/constants.js\nvar CHAT_API_VERSION = 1;\n\n// CONCATENATED MODULE: ./lib/chat-api.js\n\n\n\n// ----------------------------------------------------------------------------\n// calls back with a JSON object describing the user\'s\n// status with Keybase. For example, status.Username and status.Device.name\n// may be of interest\n// ----------------------------------------------------------------------------\nvar chat_api_runApiCommand = function runApiCommand(arg) {\n  var input = {\n    method: arg.method,\n    params: {\n      version: CHAT_API_VERSION,\n      options: arg.options\n    }\n  };\n  return new Promise(function (resolve, reject) {\n    var size = input.length;\n    exec_to_json_execToJson({\n      command: \'keybase\',\n      args: [\'chat\', \'api\'],\n      stdinBuffer: Buffer.alloc(size, JSON.stringify(input), \'utf8\')\n    }).then(function (o) {\n      var res = null;\n\n      if (o && o.result) {\n        res = o.result;\n      } else if (o && o.error) {\n        var oError = o.error;\n        reject(new Error(oError.message || oError.toString()));\n      } else {\n        reject(new Error("Unknown error parsing result - no \\"result\\" field"));\n      }\n\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n};\n\n\n// CONCATENATED MODULE: ./lib/channel-watcher.js\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\nvar ChannelWatcher =\n/*#__PURE__*/\nfunction () {\n  // --------------------------------------------------------------------------\n  // --------------------------------------------------------------------------\n  function ChannelWatcher(arg) {\n    _classCallCheck(this, ChannelWatcher);\n\n    this._bot = arg.bot;\n    this._onMessages = arg.onMessages;\n    this._channel = arg.channel;\n    this._highestId = -1;\n    this._loopCount = 0;\n\n    this._watchLoop();\n  } // --------------------------------------------------------------------------\n\n\n  _createClass(ChannelWatcher, [{\n    key: "_didISendMessage",\n    value: function _didISendMessage(m) {\n      var myInfo = this._bot.myInfo();\n\n      return myInfo ? myInfo.username === m.msg.sender.username : false;\n    } // --------------------------------------------------------------------------\n\n  }, {\n    key: "_checkForNewMessages",\n    value: function _checkForNewMessages(cb) {\n      var _this = this;\n\n      var newMessages = [];\n\n      this._bot.chatRead({\n        channel: this._channel,\n        unreadOnly: true\n      }).then(function (res) {\n        if (res && res.ratelimits) {\n          _this._bot._gasPreserver.passGas(res.ratelimits);\n        }\n\n        if (res && res.messages) {\n          newMessages = res.messages;\n          _this._highestId = res.messages.reduce(function (a, m) {\n            return Math.max(a, m.msg.id);\n          }, _this._highestId);\n        }\n\n        console.log("loopCount: ".concat(_this._loopCount, " newMessages: ").concat(newMessages.length));\n\n        if (newMessages.length) {\n          _this._onMessages({\n            messages: newMessages,\n            channel: _this._channel\n          });\n        }\n      }).catch(function (err) {\n        console.log(err);\n      });\n    } // --------------------------------------------------------------------------\n\n  }, {\n    key: "_watchLoop",\n    value: function _watchLoop() {\n      var _this2 = this;\n\n      console.log("".concat(this._loopCount, " \'").concat(this._channel.name, " entering watchLoop"));\n\n      this._checkForNewMessages(function () {\n        var delay = _this2._bot._gasPreserver.recommendedWait();\n\n        console.log("".concat(_this2._loopCount, " \'").concat(_this2._channel.name, " finishing watchLoop ").concat(delay));\n        setTimeout(function () {\n          _this2._loopCount++;\n\n          _this2._watchLoop();\n        }, delay);\n      });\n    }\n  }]);\n\n  return ChannelWatcher;\n}();\n\n\n// CONCATENATED MODULE: ./lib/utils.js\nfunction chatChannelToKey(channel) {\n  // TODO: come back to this\n  return JSON.stringify([channel.name, channel.public, channel.topic_type]);\n}\n\n\n// CONCATENATED MODULE: ./lib/full-watcher.js\nfunction full_watcher_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction full_watcher_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction full_watcher_createClass(Constructor, protoProps, staticProps) { if (protoProps) full_watcher_defineProperties(Constructor.prototype, protoProps); if (staticProps) full_watcher_defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\nvar FullWatcher =\n/*#__PURE__*/\nfunction () {\n  // --------------------------------------------------------------------------\n  // --------------------------------------------------------------------------\n  function FullWatcher(arg) {\n    full_watcher_classCallCheck(this, FullWatcher);\n\n    this._bot = arg.bot;\n    this._onMessages = arg.onMessages;\n    this._loopCount = 0;\n\n    this._watchLoop();\n  } // --------------------------------------------------------------------------\n\n\n  full_watcher_createClass(FullWatcher, [{\n    key: "_checkForNewMessagesInOneConversation",\n    value: function _checkForNewMessagesInOneConversation(conversation) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        _this._bot.chatRead({\n          channel: conversation.channel,\n          unreadOnly: true\n        }).then(function (res) {\n          if (res && res.ratelimits) {\n            _this._bot._gasPreserver.passGas(res.ratelimits);\n\n            resolve();\n          }\n\n          if (res && res.messages) {\n            var newMessages = res.messages;\n            console.log("found: ".concat(newMessages.length, " newMessages: ").concat(conversation.channel));\n\n            if (res.messages.length) {\n              _this._onMessages({\n                messages: newMessages,\n                channel: conversation.channel\n              });\n\n              resolve();\n            }\n          }\n        });\n      });\n    } // --------------------------------------------------------------------------\n\n  }, {\n    key: "_checkForNewMessagesInConversations",\n    value: function _checkForNewMessagesInConversations(arg) {\n      var _this2 = this;\n\n      var conversations = arg.conversations;\n      var index = arg.index;\n\n      if (!index) {\n        index = 0;\n      }\n\n      if (index === conversations.length) {\n        return Promise.resolve(null);\n      }\n\n      console.log("CHECKING ".concat(index, ", ").concat(conversations[index].channel, " for new messages"));\n      return this._checkForNewMessagesInOneConversation(conversations[index]).then(function () {\n        if (index + 1 === conversations.length) {}\n\n        return _this2._checkForNewMessagesInConversations({\n          conversations: conversations,\n          index: index + 1\n        });\n      });\n    } // --------------------------------------------------------------------------\n\n  }, {\n    key: "_checkForNewMessagesInAllConversations",\n    value: function _checkForNewMessagesInAllConversations() {\n      var _this3 = this;\n\n      return this._bot.chatList({}).then(function (res) {\n        if (res && res.ratelimits) {\n          _this3._bot._gasPreserver.passGas(res.ratelimits);\n        }\n\n        if (res && res.conversations) {\n          var conversations = res.conversations.filter(function (c) {\n            return c.unread;\n          });\n          console.log("Of ".concat(res.conversations.length, " there are ").concat(conversations.length, " that are unread."));\n          return _this3._checkForNewMessagesInConversations({\n            conversations: conversations\n          });\n        }\n      }).catch(function (err) {\n        console.log(\'Got error getting chat list:\', err);\n      });\n    } // --------------------------------------------------------------------------\n\n  }, {\n    key: "_watchLoop",\n    value: function _watchLoop() {\n      var _this4 = this;\n\n      this._checkForNewMessagesInAllConversations.then(function () {\n        var delay = _this4._bot._gasPreserver.recommendedWait();\n\n        setTimeout(function () {\n          _this4._loopCount++;\n\n          _this4._watchLoop();\n        }, delay);\n      });\n    } // --------------------------------------------------------------------------\n\n  }]);\n\n  return FullWatcher;\n}();\n\n\n// CONCATENATED MODULE: ./lib/tweakables.js\nvar tweakables = {\n  MIN_CHANNEL_WATCH_LOOP: 1000,\n  MAX_CHANNEL_WATCH_LOOP: 60000,\n  DEFAULT_GAS: 500,\n  DEFAULT_TIME_LEFT: 1500,\n  TARGET_GAS_REMAINING: 100,\n  SAFETY_BUFFER: 1.5,\n  GAS_MONITOR_WINDOW: 10000,\n  GAS_ADJ_MULT: 1.1\n};\n/* harmony default export */ var lib_tweakables = (tweakables);\n// CONCATENATED MODULE: ./lib/gas-preserver.js\nfunction gas_preserver_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction gas_preserver_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction gas_preserver_createClass(Constructor, protoProps, staticProps) { if (protoProps) gas_preserver_defineProperties(Constructor.prototype, protoProps); if (staticProps) gas_preserver_defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\nvar gas_preserver_GasPreserver =\n/*#__PURE__*/\nfunction () {\n  // --------------------------------------------------------------------------\n  // --------------------------------------------------------------------------\n  function GasPreserver() {\n    gas_preserver_classCallCheck(this, GasPreserver);\n\n    this._lastPassedGas = [];\n    this._currentWait = lib_tweakables.MIN_CHANNEL_WATCH_LOOP;\n  } // --------------------------------------------------------------------------\n\n\n  gas_preserver_createClass(GasPreserver, [{\n    key: "passGas",\n    value: function passGas(rateLimits) {\n      this._lastPassedGas.push(rateLimits[0]); // let\'s just take the first for now\n\n\n      this._filterOldGas();\n    } // --------------------------------------------------------------------------\n\n  }, {\n    key: "recommendedWait",\n    value: function recommendedWait() {\n      var speed = this._getCurrentSpeed();\n\n      var gas = this._getRemainingGas();\n\n      var gas_left_with_buffer = Math.max(0, gas - lib_tweakables.TARGET_GAS_REMAINING);\n\n      var timeLeft = this._getTimeTillReset(); // this._currentWait = 1000 * (speed * timeLeft / gas) * tweakables.SAFETY_BUFFER\n\n\n      if (speed * timeLeft > gas_left_with_buffer) {\n        this._currentWait *= lib_tweakables.GAS_ADJ_MULT;\n      } else {\n        this._currentWait /= lib_tweakables.GAS_ADJ_MULT;\n      }\n\n      this._currentWait = Math.max(lib_tweakables.MIN_CHANNEL_WATCH_LOOP, this._currentWait);\n      this._currentWait = Math.min(lib_tweakables.MAX_CHANNEL_WATCH_LOOP, this._currentWait);\n      console.log("...speed=".concat(speed.toFixed(2), ", gas=").concat(gas, ", timeLeft=").concat(timeLeft, ", currentWait=").concat(this._currentWait, ", history=").concat(this._lastPassedGas.length));\n      return this._currentWait;\n    } // --------------------------------------------------------------------------\n\n  }, {\n    key: "_filterOldGas",\n    value: function _filterOldGas() {\n      var ind = 0; // throw away any data before a reset\n\n      for (ind = this._lastPassedGas.length - 2; ind >= 0; ind--) {\n        var latest = this._lastPassedGas[this._lastPassedGas.length - 1];\n        var curr = this._lastPassedGas[ind];\n\n        if (curr.gas < latest.gas || curr.reset < latest.reset) {\n          break;\n        }\n      }\n\n      if (ind >= 0) {\n        console.log(\'BEFORE GAS CLEANUP\', this._lastPassedGas);\n\n        this._lastPassedGas.splice(0, ind + 1);\n\n        console.log(\'AFTER GAS CLEANUP\', this._lastPassedGas);\n      } // now throw away anything over a certain age\n\n\n      if (this._lastPassedGas.length > 2) {\n        var keepers = this._lastPassedGas.slice(-2);\n\n        var candidates = this._lastPassedGas.slice(0, -2);\n\n        candidates = candidates.filter(function (c) {\n          return c.reset < keepers[1].reset + lib_tweakables.GAS_MONITOR_WINDOW / 1000;\n        });\n        this._lastPassedGas = candidates.concat(keepers); //console.log(this._lastPassedGas)\n      }\n\n      return;\n    } // --------------------------------------------------------------------------\n\n  }, {\n    key: "_getCurrentSpeed",\n    value: function _getCurrentSpeed() {\n      if (this._lastPassedGas.length < 2) {\n        return 1;\n      } else {\n        var g = this._lastPassedGas;\n        var glast = g[g.length - 1];\n        var speed = (g[0].gas - glast.gas) / (1 + g[0].reset - glast.reset);\n        return speed;\n      }\n    } // --------------------------------------------------------------------------\n\n  }, {\n    key: "_getRemainingGas",\n    value: function _getRemainingGas() {\n      if (this._lastPassedGas.length < 1) {\n        return lib_tweakables.DEFAULT_GAS;\n      } else {\n        return this._lastPassedGas[this._lastPassedGas.length - 1].gas;\n      }\n    } // --------------------------------------------------------------------------\n\n  }, {\n    key: "_getTimeTillReset",\n    value: function _getTimeTillReset() {\n      if (this._lastPassedGas.length < 1) {\n        return lib_tweakables.DEFAULT_TIME_LEFT;\n      } else {\n        return this._lastPassedGas[this._lastPassedGas.length - 1].reset;\n      }\n    } // --------------------------------------------------------------------------\n\n  }]);\n\n  return GasPreserver;\n}();\n\n\n// CONCATENATED MODULE: ./lib/keybase-exec.js\n\nfunction keybaseExec(params) {\n  var child = Object(external_child_process_["spawn"])(\'keybase\', params.args);\n  var outBuffers = [];\n  var out = null;\n\n  if (params.stdinBuffer) {\n    child.stdin.write(params.stdinBuffer);\n    child.stdin.end();\n  }\n\n  child.stdout.on(\'data\', function (chunk) {\n    outBuffers.push(chunk);\n  });\n  return new Promise(function (resolve, reject) {\n    child.on(\'close\', function (code) {\n      if (code) {\n        reject(new Error("exited with code ".concat(code)));\n      } else {\n        var stdout = Buffer.concat(outBuffers).toString(\'utf8\');\n\n        try {\n          out = stdout === \'\' ? stdout : JSON.parse(stdout);\n        } catch (e) {\n          reject(e);\n        }\n      }\n\n      resolve(out);\n    });\n  });\n}\n// CONCATENATED MODULE: ./lib/bot.js\nfunction bot_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction bot_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction bot_createClass(Constructor, protoProps, staticProps) { if (protoProps) bot_defineProperties(Constructor.prototype, protoProps); if (staticProps) bot_defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\n\n\n\n\n\n\n// ============================================================================\nvar bot_Bot =\n/*#__PURE__*/\nfunction () {\n  // --------------------------------------------------------------------------\n  function Bot() {\n    bot_classCallCheck(this, Bot);\n\n    this._verbose = false;\n    this._dPair = null;\n    this._initialized = false;\n    this._channelWatchers = new Map();\n    this._fullWatcher = null;\n    this._gasPreserver = new gas_preserver_GasPreserver();\n  } // --------------------------------------------------------------------------\n\n\n  bot_createClass(Bot, [{\n    key: "init",\n    value: function init(options) {\n      var _this = this;\n\n      this._verbose = options.verbose || false;\n      return keybaseExec({\n        args: [\'oneshot\', \'--username\', options.username, \'--paperkey\', options.paperkey]\n      }).then(function () {\n        getKeybaseUsernameAndDevicename().then(function (currentDPair) {\n          if (currentDPair) {\n            _this._dPair = currentDPair;\n\n            _this._log("intialized ".concat(currentDPair.username, " (device=").concat(currentDPair.devicename, ")"));\n          }\n\n          _this._initialized = true;\n        });\n      });\n    } // --------------------------------------------------------------------------\n\n  }, {\n    key: "chatList",\n    value: function chatList(options) {\n      return this._safelyRunApiCommand({\n        method: \'list\',\n        options: options\n      });\n    } // --------------------------------------------------------------------------\n\n  }, {\n    key: "chatSend",\n    value: function chatSend(options) {\n      var channel = options.channel,\n          message = options.message;\n      return this._safelyRunApiCommand({\n        method: \'send\',\n        options: {\n          channel: channel,\n          message: message\n        }\n      });\n    } // --------------------------------------------------------------------------\n\n  }, {\n    key: "chatRead",\n    value: function chatRead(options) {\n      var channel = options.channel;\n      var peek = false;\n      var unreadOnly = false;\n\n      if (typeof options.peek !== \'undefined\') {\n        peek = options.peek;\n      }\n\n      if (typeof options.unreadOnly !== \'undefined\') {\n        unreadOnly = options.unreadOnly;\n      }\n\n      return this._safelyRunApiCommand({\n        method: \'read\',\n        options: {\n          channel: channel,\n          peek: peek,\n          unreadOnly: unreadOnly\n        }\n      });\n    } // --------------------------------------------------------------------------\n\n  }, {\n    key: "chatDelete",\n    value: function chatDelete(options) {\n      var channel = options.channel,\n          messageId = options.messageId;\n      return this._safelyRunApiCommand({\n        method: \'delete\',\n        options: {\n          channel: channel,\n          messageId: messageId\n        }\n      });\n    } // --------------------------------------------------------------------------\n\n  }, {\n    key: "myInfo",\n    value: function myInfo() {\n      return this._dPair;\n    } // --------------------------------------------------------------------------\n\n  }, {\n    key: "watchChannelForNewMessages",\n    value: function watchChannelForNewMessages(options) {\n      var channel = options.channel,\n          onMessages = options.onMessages;\n      var key = chatChannelToKey(channel);\n\n      if (this._channelWatchers.has(key)) {\n        throw new Error("already watching the channel ".concat(JSON.stringify(channel)));\n      } else {\n        this._channelWatchers.set(key, new ChannelWatcher({\n          channel: channel,\n          onMessages: onMessages,\n          bot: this\n        }));\n      }\n    } // --------------------------------------------------------------------------\n\n  }, {\n    key: "watchAllChannelsForNewMessages",\n    value: function watchAllChannelsForNewMessages(options) {\n      var onMessages = options.onMessages;\n\n      if (this._fullWatcher) {\n        throw new Error("already watching watching; can\'t have 2 message watchers}");\n      } else {\n        this._fullWatcher = new FullWatcher({\n          onMessages: onMessages,\n          bot: this\n        });\n      }\n    } // --------------------------------------------------------------------------\n    // --------------------------------------------------------------------------\n    //  - make sure inited ok\n    //  - make sure user is still the same user since init\n    // --------------------------------------------------------------------------\n\n  }, {\n    key: "_log",\n    value: function _log(msg) {\n      if (this._verbose) {\n        console.log(msg);\n      }\n    }\n  }, {\n    key: "_checkUserAndInit",\n    value: function _checkUserAndInit() {\n      var _this2 = this;\n\n      return new Promise(function (resolve, reject) {\n        getKeybaseUsernameAndDevicename().then(function (currentDPair) {\n          if (!_this2._initialized || !currentDPair || !_this2._dPair || currentDPair.username !== _this2._dPair.username) {\n            reject(new Error("Uh-oh, username has changed or we never initialized correctly."));\n          }\n\n          resolve();\n        });\n      });\n    } // --------------------------------------------------------------------------\n\n  }, {\n    key: "_safelyRunApiCommand",\n    value: function _safelyRunApiCommand(arg) {\n      var _this3 = this;\n\n      return new Promise(function (resolve, reject) {\n        _this3._checkUserAndInit().then(function () {\n          return chat_api_runApiCommand(arg).then(function (res) {\n            resolve(res);\n          }).catch(function (err) {\n            return reject(err);\n          });\n        });\n      });\n    }\n  }]);\n\n  return Bot;\n}();\n\n\n// CONCATENATED MODULE: ./lib/entry.js\n/* concated harmony reexport Bot */__webpack_require__.d(__webpack_exports__, "Bot", function() { return bot_Bot; });\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9saWIvZXhlYy10by1qc29uLmpzPzhhN2UiLCJ3ZWJwYWNrOi8vLy4vbGliL2tleWJhc2Utc3RhdHVzLmpzPzQ1OTEiLCJ3ZWJwYWNrOi8vLy4vbGliL2NvbnN0YW50cy5qcz82MTI5Iiwid2VicGFjazovLy8uL2xpYi9jaGF0LWFwaS5qcz8zZTI4Iiwid2VicGFjazovLy8uL2xpYi9jaGFubmVsLXdhdGNoZXIuanM/YzRkOSIsIndlYnBhY2s6Ly8vLi9saWIvdXRpbHMuanM/MGJmMSIsIndlYnBhY2s6Ly8vLi9saWIvZnVsbC13YXRjaGVyLmpzPzg5YzIiLCJ3ZWJwYWNrOi8vLy4vbGliL3R3ZWFrYWJsZXMuanM/MGU3MSIsIndlYnBhY2s6Ly8vLi9saWIvZ2FzLXByZXNlcnZlci5qcz82ZjZhIiwid2VicGFjazovLy8uL2xpYi9rZXliYXNlLWV4ZWMuanM/YmYwZCIsIndlYnBhY2s6Ly8vLi9saWIvYm90LmpzPzRjYmQiLCJ3ZWJwYWNrOi8vLy4vbGliL2VudHJ5LmpzPzhhZjkiXSwibmFtZXMiOlsiZXhlY1RvSnNvbiIsInBhcmFtcyIsInN0ZGluQnVmZmVyIiwib3V0Iiwib3V0QnVmZmVycyIsImNoaWxkIiwic3Bhd24iLCJjb21tYW5kIiwiYXJncyIsInN0ZGluIiwid3JpdGUiLCJlbmQiLCJzdGRvdXQiLCJvbiIsImNodW5rIiwicHVzaCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiY29kZSIsIkVycm9yIiwiQnVmZmVyIiwiY29uY2F0IiwidG9TdHJpbmciLCJKU09OIiwicGFyc2UiLCJlIiwiZ2V0S2V5YmFzZU5hdGl2ZVN0YXR1c0pzb24iLCJnZXRLZXliYXNlVXNlcm5hbWVBbmREZXZpY2VuYW1lIiwidGhlbiIsInN0YXR1cyIsIlVzZXJuYW1lIiwiRGV2aWNlIiwibmFtZSIsInVzZXJuYW1lIiwiZGV2aWNlbmFtZSIsIkNIQVRfQVBJX1ZFUlNJT04iLCJydW5BcGlDb21tYW5kIiwiYXJnIiwiaW5wdXQiLCJtZXRob2QiLCJ2ZXJzaW9uIiwib3B0aW9ucyIsInNpemUiLCJsZW5ndGgiLCJhbGxvYyIsInN0cmluZ2lmeSIsIm8iLCJyZXMiLCJyZXN1bHQiLCJlcnJvciIsIm9FcnJvciIsIm1lc3NhZ2UiLCJjYXRjaCIsImVyciIsIkNoYW5uZWxXYXRjaGVyIiwiX2JvdCIsImJvdCIsIl9vbk1lc3NhZ2VzIiwib25NZXNzYWdlcyIsIl9jaGFubmVsIiwiY2hhbm5lbCIsIl9oaWdoZXN0SWQiLCJfbG9vcENvdW50IiwiX3dhdGNoTG9vcCIsIm0iLCJteUluZm8iLCJtc2ciLCJzZW5kZXIiLCJjYiIsIm5ld01lc3NhZ2VzIiwiY2hhdFJlYWQiLCJ1bnJlYWRPbmx5IiwicmF0ZWxpbWl0cyIsIl9nYXNQcmVzZXJ2ZXIiLCJwYXNzR2FzIiwibWVzc2FnZXMiLCJyZWR1Y2UiLCJhIiwiTWF0aCIsIm1heCIsImlkIiwiY29uc29sZSIsImxvZyIsIl9jaGVja0Zvck5ld01lc3NhZ2VzIiwiZGVsYXkiLCJyZWNvbW1lbmRlZFdhaXQiLCJzZXRUaW1lb3V0IiwiY2hhdENoYW5uZWxUb0tleSIsInB1YmxpYyIsInRvcGljX3R5cGUiLCJGdWxsV2F0Y2hlciIsImNvbnZlcnNhdGlvbiIsImNvbnZlcnNhdGlvbnMiLCJpbmRleCIsIl9jaGVja0Zvck5ld01lc3NhZ2VzSW5PbmVDb252ZXJzYXRpb24iLCJfY2hlY2tGb3JOZXdNZXNzYWdlc0luQ29udmVyc2F0aW9ucyIsImNoYXRMaXN0IiwiZmlsdGVyIiwiYyIsInVucmVhZCIsIl9jaGVja0Zvck5ld01lc3NhZ2VzSW5BbGxDb252ZXJzYXRpb25zIiwidHdlYWthYmxlcyIsIk1JTl9DSEFOTkVMX1dBVENIX0xPT1AiLCJNQVhfQ0hBTk5FTF9XQVRDSF9MT09QIiwiREVGQVVMVF9HQVMiLCJERUZBVUxUX1RJTUVfTEVGVCIsIlRBUkdFVF9HQVNfUkVNQUlOSU5HIiwiU0FGRVRZX0JVRkZFUiIsIkdBU19NT05JVE9SX1dJTkRPVyIsIkdBU19BREpfTVVMVCIsIkdhc1ByZXNlcnZlciIsIl9sYXN0UGFzc2VkR2FzIiwiX2N1cnJlbnRXYWl0IiwicmF0ZUxpbWl0cyIsIl9maWx0ZXJPbGRHYXMiLCJzcGVlZCIsIl9nZXRDdXJyZW50U3BlZWQiLCJnYXMiLCJfZ2V0UmVtYWluaW5nR2FzIiwiZ2FzX2xlZnRfd2l0aF9idWZmZXIiLCJ0aW1lTGVmdCIsIl9nZXRUaW1lVGlsbFJlc2V0IiwibWluIiwidG9GaXhlZCIsImluZCIsImxhdGVzdCIsImN1cnIiLCJyZXNldCIsInNwbGljZSIsImtlZXBlcnMiLCJzbGljZSIsImNhbmRpZGF0ZXMiLCJnIiwiZ2xhc3QiLCJrZXliYXNlRXhlYyIsIkJvdCIsIl92ZXJib3NlIiwiX2RQYWlyIiwiX2luaXRpYWxpemVkIiwiX2NoYW5uZWxXYXRjaGVycyIsIk1hcCIsIl9mdWxsV2F0Y2hlciIsInZlcmJvc2UiLCJwYXBlcmtleSIsImN1cnJlbnREUGFpciIsIl9sb2ciLCJfc2FmZWx5UnVuQXBpQ29tbWFuZCIsInBlZWsiLCJtZXNzYWdlSWQiLCJrZXkiLCJoYXMiLCJzZXQiLCJfY2hlY2tVc2VyQW5kSW5pdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0E7O0FBZUEsSUFBTUEsdUJBQVUsR0FBRyxTQUFiQSxVQUFhLENBQUNDLE1BQUQsRUFBaUM7QUFDbEQsTUFBTUMsV0FBVyxHQUFHRCxNQUFNLENBQUNDLFdBQTNCO0FBQ0EsTUFBSUMsR0FBUSxHQUFHLElBQWY7QUFDQSxNQUFNQyxVQUF5QixHQUFHLEVBQWxDO0FBQ0EsTUFBTUMsS0FBSyxHQUFHQyx3Q0FBSyxDQUFDTCxNQUFNLENBQUNNLE9BQVIsRUFBaUJOLE1BQU0sQ0FBQ08sSUFBUCxJQUFlLEVBQWhDLENBQW5COztBQUVBLE1BQUlOLFdBQUosRUFBaUI7QUFDZkcsU0FBSyxDQUFDSSxLQUFOLENBQVlDLEtBQVosQ0FBa0JSLFdBQWxCO0FBQ0FHLFNBQUssQ0FBQ0ksS0FBTixDQUFZRSxHQUFaO0FBQ0Q7O0FBRUROLE9BQUssQ0FBQ08sTUFBTixDQUFhQyxFQUFiLENBQWdCLE1BQWhCLEVB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c0UsUUFBVCxFQUFtQjtBQUNqQnZELGVBQU8sQ0FBQ0MsR0FBUixDQUFZaEIsR0FBWjtBQUNEO0FBQ0Y7Ozt3Q0FFaUM7QUFBQTs7QUFDaEMsYUFBTyxJQUFJbkQsT0FBSixDQUFZLFVBQUNDLE9BQUQsRUFBVUMsTUFBVixFQUFxQjtBQUN0Q1UsdUNBQStCLEdBQUdDLElBQWxDLENBQXVDLFVBQUFvSCxZQUFZLEVBQUk7QUFDckQsY0FDRSxDQUFDLE1BQUksQ0FBQ04sWUFBTixJQUNBLENBQUNNLFlBREQsSUFFQSxDQUFDLE1BQUksQ0FBQ1AsTUFGTixJQUdBTyxZQUFZLENBQUMvRyxRQUFiLEtBQTBCLE1BQUksQ0FBQ3dHLE1BQUwsQ0FBWXhHLFFBSnhDLEVBS0U7QUFDQWhCLGtCQUFNLENBQUMsSUFBSUUsS0FBSixrRUFBRCxDQUFOO0FBQ0Q7O0FBQ0RILGlCQUFPO0FBQ1IsU0FWRDtBQVdELE9BWk0sQ0FBUDtBQWFELEssQ0FFRDs7Ozt5Q0FFcUJxQixHLEVBQWtDO0FBQUE7O0FBQ3JELGFBQU8sSUFBSXRCLE9BQUosQ0FBWSxVQUFDQyxPQUFELEVBQVVDLE1BQVYsRUFBcUI7QUFDdEMsY0FBSSxDQUFDdUksaUJBQUwsR0FBeUI1SCxJQUF6QixDQUE4QixZQUFNO0FBQ2xDLGlCQUFPUSxzQkFBYSxDQUFDQyxHQUFELENBQWIsQ0FDSlQsSUFESSxDQUNDLFVBQUFtQixHQUFHLEVBQUk7QUFDWC9CLG1CQUFPLENBQUMrQixHQUFELENBQVA7QUFDRCxXQUhJLEVBSUpLLEtBSkksQ0FJRSxVQUFBQyxHQUFHO0FBQUEsbUJBQUlwQyxNQUFNLENBQUNvQyxHQUFELENBQVY7QUFBQSxXQUpMLENBQVA7QUFLRCxTQU5EO0FBT0QsT0FSTSxDQUFQO0FBU0Q7Ozs7Ozs7O0FDdkxIO0FBQUEiLCJmaWxlIjoiMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEBmbG93XG5pbXBvcnQge3NwYXdufSBmcm9tICdjaGlsZF9wcm9jZXNzJ1xuaW1wb3J0IHR5cGUge1Byb21pc2VFeGVjfSBmcm9tICcuL3R5cGVzJ1xuXG4vLyB0YWtlcyBhIHN0cmluZyB0byBydW4gb24gdGhlIGNvbW1hbmQgbGluZSB0aGF0IGlzIGV4cGVjdGluZ1xuLy8gSlNPTiBpbiBzdGRvdXQuIGNhbGxzIGJhY2sgd2l0aCBhbiBlcnJvciBpZiBvdXRwdXQgZG9lc24ndFxuLy8gcGFyc2UgYXMgSlNPTiBvciB0aGVyZSdzIGFuIGVycm9yIGluIGV4ZWN1dGlvblxuLy9cbi8vIGlmIHBhc3NlZCBhIEJ1ZmZlciBpbiBzdGRpbkJ1ZmZlciwgcGlwZXMgdGhhdCBpbnRvIHRoZSBwcm9ncmFtXG5cbnR5cGUgUGFyYW1zID0ge3xcbiAgY29tbWFuZDogc3RyaW5nLFxuICBhcmdzPzogQXJyYXk8c3RyaW5nPixcbiAgc3RkaW5CdWZmZXI/OiBCdWZmZXIsXG58fVxuXG5jb25zdCBleGVjVG9Kc29uID0gKHBhcmFtczogUGFyYW1zKTogUHJvbWlzZUV4ZWMgPT4ge1xuICBjb25zdCBzdGRpbkJ1ZmZlciA9IHBhcmFtcy5zdGRpbkJ1ZmZlclxuICBsZXQgb3V0OiBhbnkgPSBudWxsXG4gIGNvbnN0IG91dEJ1ZmZlcnM6IEFycmF5PEJ1ZmZlcj4gPSBbXVxuICBjb25zdCBjaGlsZCA9IHNwYXduKHBhcmFtcy5jb21tYW5kLCBwYXJhbXMuYXJncyB8fCBbXSlcblxuICBpZiAoc3RkaW5CdWZmZXIpIHtcbiAgICBjaGlsZC5zdGRpbi53cml0ZShzdGRpbkJ1ZmZlcilcbiAgICBjaGlsZC5zdGRpbi5lbmQoKVxuICB9XG5cbiAgY2hpbGQuc3Rkb3V0Lm9uKCdkYXRhJywgY2h1bmsgPT4ge1xuICAgIG91dEJ1ZmZlcnMucHVzaChjaHVuaylcbiAgfSlcblxuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGNoaWxkLm9uKCdjbG9zZScsIGNvZGUgPT4ge1xuICAgICAgaWYgKGNvZGUpIHtcbiAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihgZXhpdGVkIHdpdGggY29kZSAke2NvZGV9YCkpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBzdGRvdXQ6IHN0cmluZyA9IEJ1ZmZlci5jb25jYXQob3V0QnVmZmVycykudG9TdHJpbmcoJ3V0ZjgnKVxuICAgICAgICB0cnkge1xuICAgICAgICAgIG91dCA9IEpTT04ucGFyc2Uoc3Rkb3V0KVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgcmVqZWN0KGUpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJlc29sdmUob3V0KVxuICAgIH0pXG4gIH0pXG59XG5cbmV4cG9ydCB7ZXhlY1RvSnNvbn1cbiIsIi8vIEBmbG93XG5pbXBvcnQgdHlwZSB7UHJvbWlzZUV4ZWN9IGZyb20gJy4vdHlwZXMuanMnXG5pbXBvcnQge2V4ZWNUb0pzb259IGZyb20gJy4vZXhlYy10by1qc29uLmpzJ1xuXG50eXBlIFVzZXJuYW1lQW5kRGV2aWNlID0ge3xcbiAgdXNlcm5hbWU6IHN0cmluZyxcbiAgZGV2aWNlbmFtZTogc3RyaW5nLFxufH1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gY2FsbHMgYmFjayB3aXRoIGEgSlNPTiBvYmplY3QgZGVzY3JpYmluZyB0aGUgdXNlcidzXG4vLyBzdGF0dXMgd2l0aCBLZXliYXNlLiBGb3IgZXhhbXBsZSwgc3RhdHVzLlVzZXJuYW1lIGFuZCBzdGF0dXMuRGV2aWNlLm5hbWVcbi8vIG1heSBiZSBvZiBpbnRlcmVzdFxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5jb25zdCBnZXRLZXliYXNlTmF0aXZlU3RhdHVzSnNvbiA9ICgpOiBQcm9taXNlRXhlYyA9PiBleGVjVG9Kc29uKHtjb21tYW5kOiAna2V5YmFzZScsIGFyZ3M6IFsnc3RhdHVzJywgJy1qJ119KVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBjYWxscyBiYWNrIHdpdGgganVzdCB7dXNlcm5hbWUsIGRldmljZW5hbWV9LCBpZiBmdWxseSBsb2dnZWQgaW4gYW5kXG4vLyB1bmxvY2tlZC5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuY29uc3QgZ2V0S2V5YmFzZVVzZXJuYW1lQW5kRGV2aWNlbmFtZSA9ICgpOiBQcm9taXNlPFVzZXJuYW1lQW5kRGV2aWNlPiA9PiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgZ2V0S2V5YmFzZU5hdGl2ZVN0YXR1c0pzb24oKS50aGVuKHN0YXR1cyA9PiB7XG4gICAgICBpZiAoc3RhdHVzICYmIHN0YXR1cy5Vc2VybmFtZSAmJiBzdGF0dXMuRGV2aWNlICYmIHN0YXR1cy5EZXZpY2UubmFtZSkge1xuICAgICAgICByZXNvbHZlKHt1c2VybmFtZTogc3RhdHVzLlVzZXJuYW1lLCBkZXZpY2VuYW1lOiBzdGF0dXMuRGV2aWNlLm5hbWV9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVqZWN0KG5ldyBFcnJvcignZmFpbGVkIHRvIGdldCB1c2VybmFtZSArIGRldmljZSBuYW1lJykpXG4gICAgICB9XG4gICAgfSlcbiAgfSlcbn1cblxuZXhwb3J0IHtnZXRLZXliYXNlTmF0aXZlU3RhdHVzSnNvbiwgZ2V0S2V5YmFzZVVzZXJuYW1lQW5kRGV2aWNlbmFtZX1cbiIsIi8vIEBmbG93XG5jb25zdCBDSEFUX0FQSV9WRVJTSU9OID0gMVxuXG5leHBvcnQge0NIQVRfQVBJX1ZFUlNJT059XG4iLCIvLyBAZmxvd1xuaW1wb3J0IHtleGVjVG9Kc29ufSBmcm9tICcuL2V4ZWMtdG8tanNvbidcbmltcG9ydCB7Q0hBVF9BUElfVkVSU0lPTn0gZnJvbSAnLi9jb25zdGFudHMuanMnXG5cbnR5cGUgQXBpQ29tbWFuZEFyZyA9IHttZXRob2Q6IHN0cmluZywgb3B0aW9uczogT2JqZWN0fVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBjYWxscyBiYWNrIHdpdGggYSBKU09OIG9iamVjdCBkZXNjcmliaW5nIHRoZSB1c2VyJ3Ncbi8vIHN0YXR1cyB3aXRoIEtleWJhc2UuIEZvciBleGFtcGxlLCBzdGF0dXMuVXNlcm5hbWUgYW5kIHN0YXR1cy5EZXZpY2UubmFtZVxuLy8gbWF5IGJlIG9mIGludGVyZXN0XG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmNvbnN0IHJ1bkFwaUNvbW1hbmQgPSAoYXJnOiBBcGlDb21tYW5kQXJnKTogUHJvbWlzZTxhbnk+ID0+IHtcbiAgY29uc3QgaW5wdXQ6IE9iamVjdCA9IHtcbiAgICBtZXRob2Q6IGFyZy5tZXRob2QsXG4gICAgcGFyYW1zOiB7XG4gICAgICB2ZXJzaW9uOiBDSEFUX0FQSV9WRVJTSU9OLFxuICAgICAgb3B0aW9uczogYXJnLm9wdGlvbnMsXG4gICAgfSxcbiAgfVxuXG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgY29uc3Qgc2l6ZSA9IGlucHV0Lmxlbmd0aFxuICAgIGV4ZWNUb0pzb24oe1xuICAgICAgY29tbWFuZDogJ2tleWJhc2UnLFxuICAgICAgYXJnczogWydjaGF0JywgJ2FwaSddLFxuICAgICAgc3RkaW5CdWZmZXI6IEJ1ZmZlci5hbGxvYyhzaXplLCBKU09OLnN0cmluZ2lmeShpbnB1dCksICd1dGY4JyksXG4gICAgfSlcbiAgICAgIC50aGVuKChvOiBhbnkpID0+IHtcbiAgICAgICAgbGV0IHJlczogYW55ID0gbnVsbFxuICAgICAgICBpZiAobyAmJiBvLnJlc3VsdCkge1xuICAgICAgICAgIHJlcyA9IG8ucmVzdWx0XG4gICAgICAgIH0gZWxzZSBpZiAobyAmJiBvLmVycm9yKSB7XG4gICAgICAgICAgY29uc3Qgb0Vycm9yID0gby5lcnJvclxuICAgICAgICAgIHJlamVjdChuZXcgRXJyb3Iob0Vycm9yLm1lc3NhZ2UgfHwgb0Vycm9yLnRvU3RyaW5nKCkpKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoYFVua25vd24gZXJyb3IgcGFyc2luZyByZXN1bHQgLSBubyBcInJlc3VsdFwiIGZpZWxkYCkpXG4gICAgICAgIH1cbiAgICAgICAgcmVzb2x2ZShyZXMpXG4gICAgICB9KVxuICAgICAgLmNhdGNoKChlcnI/OiBFcnJvcikgPT4ge1xuICAgICAgICByZWplY3QoZXJyKVxuICAgICAgfSlcbiAgfSlcbn1cblxuZXhwb3J0IHtydW5BcGlDb21tYW5kfVxuZXhwb3J0IHR5cGUge0FwaUNvbW1hbmRBcmd9XG4iLCIvLyBAZmxvd1xuaW1wb3J0IHtCb3R9IGZyb20gJy4vYm90LmpzJ1xuaW1wb3J0IHR5cGUge01lc3NhZ2VzSGFuZGxlciwgQ2JFcnJvciwgQ2hhdENoYW5uZWwsIENoYXRSZWFkTWVzc2FnZX0gZnJvbSAnLi90eXBlcy5qcydcblxuY2xhc3MgQ2hhbm5lbFdhdGNoZXIge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIF9ib3Q6IEJvdFxuICBfY2hhbm5lbDogQ2hhdENoYW5uZWxcbiAgX29uTWVzc2FnZXM6IE1lc3NhZ2VzSGFuZGxlclxuICBfaGlnaGVzdElkOiBudW1iZXJcbiAgX2xvb3BDb3VudDogbnVtYmVyXG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICBjb25zdHJ1Y3Rvcihhcmc6IHtjaGFubmVsOiBDaGF0Q2hhbm5lbCwgYm90OiBCb3QsIG9uTWVzc2FnZXM6IE1lc3NhZ2VzSGFuZGxlcn0pOiB2b2lkIHtcbiAgICB0aGlzLl9ib3QgPSBhcmcuYm90XG4gICAgdGhpcy5fb25NZXNzYWdlcyA9IGFyZy5vbk1lc3NhZ2VzXG4gICAgdGhpcy5fY2hhbm5lbCA9IGFyZy5jaGFubmVsXG4gICAgdGhpcy5faGlnaGVzdElkID0gLTFcbiAgICB0aGlzLl9sb29wQ291bnQgPSAwXG4gICAgdGhpcy5fd2F0Y2hMb29wKClcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgX2RpZElTZW5kTWVzc2FnZShtOiBhbnkpOiBib29sZWFuIHtcbiAgICBjb25zdCBteUluZm8gPSB0aGlzLl9ib3QubXlJbmZvKClcbiAgICByZXR1cm4gbXlJbmZvID8gbXlJbmZvLnVzZXJuYW1lID09PSBtLm1zZy5zZW5kZXIudXNlcm5hbWUgOiBmYWxzZVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICBfY2hlY2tGb3JOZXdNZXNzYWdlcyhjYjogQ2JFcnJvcik6IHZvaWQge1xuICAgIGxldCBuZXdNZXNzYWdlczogQXJyYXk8Q2hhdFJlYWRNZXNzYWdlPiA9IFtdXG4gICAgdGhpcy5fYm90XG4gICAgICAuY2hhdFJlYWQoe2NoYW5uZWw6IHRoaXMuX2NoYW5uZWwsIHVucmVhZE9ubHk6IHRydWV9KVxuICAgICAgLnRoZW4ocmVzID0+IHtcbiAgICAgICAgaWYgKHJlcyAmJiByZXMucmF0ZWxpbWl0cykge1xuICAgICAgICAgIHRoaXMuX2JvdC5fZ2FzUHJlc2VydmVyLnBhc3NHYXMocmVzLnJhdGVsaW1pdHMpXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlcyAmJiByZXMubWVzc2FnZXMpIHtcbiAgICAgICAgICBuZXdNZXNzYWdlcyA9IHJlcy5tZXNzYWdlc1xuICAgICAgICAgIHRoaXMuX2hpZ2hlc3RJZCA9IHJlcy5tZXNzYWdlcy5yZWR1Y2UoKGEsIG0pID0+IE1hdGgubWF4KGEsIG0ubXNnLmlkKSwgdGhpcy5faGlnaGVzdElkKVxuICAgICAgICB9XG4gICAgICAgIGNvbnNvbGUubG9nKGBsb29wQ291bnQ6ICR7dGhpcy5fbG9vcENvdW50fSBuZXdNZXNzYWdlczogJHtuZXdNZXNzYWdlcy5sZW5ndGh9YClcbiAgICAgICAgaWYgKG5ld01lc3NhZ2VzLmxlbmd0aCkge1xuICAgICAgICAgIHRoaXMuX29uTWVzc2FnZXMoe21lc3NhZ2VzOiBuZXdNZXNzYWdlcywgY2hhbm5lbDogdGhpcy5fY2hhbm5lbH0pXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICAuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coZXJyKVxuICAgICAgfSlcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgX3dhdGNoTG9vcCgpOiB2b2lkIHtcbiAgICBjb25zb2xlLmxvZyhgJHt0aGlzLl9sb29wQ291bnR9ICcke3RoaXMuX2NoYW5uZWwubmFtZX0gZW50ZXJpbmcgd2F0Y2hMb29wYClcbiAgICB0aGlzLl9jaGVja0Zvck5ld01lc3NhZ2VzKCgpID0+IHtcbiAgICAgIGNvbnN0IGRlbGF5ID0gdGhpcy5fYm90Ll9nYXNQcmVzZXJ2ZXIucmVjb21tZW5kZWRXYWl0KClcbiAgICAgIGNvbnNvbGUubG9nKGAke3RoaXMuX2xvb3BDb3VudH0gJyR7dGhpcy5fY2hhbm5lbC5uYW1lfSBmaW5pc2hpbmcgd2F0Y2hMb29wICR7ZGVsYXl9YClcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLl9sb29wQ291bnQrK1xuICAgICAgICB0aGlzLl93YXRjaExvb3AoKVxuICAgICAgfSwgZGVsYXkpXG4gICAgfSlcbiAgfVxufVxuXG5leHBvcnQge0NoYW5uZWxXYXRjaGVyfVxuIiwiLy8gQGZsb3dcbmltcG9ydCB0eXBlIHtDaGF0Q2hhbm5lbH0gZnJvbSAnLi90eXBlcy5qcydcblxuZnVuY3Rpb24gY2hhdENoYW5uZWxUb0tleSAoY2hhbm5lbDogQ2hhdENoYW5uZWwpOiBzdHJpbmcge1xuICAvLyBUT0RPOiBjb21lIGJhY2sgdG8gdGhpc1xuICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoW2NoYW5uZWwubmFtZSwgY2hhbm5lbC5wdWJsaWMsIGNoYW5uZWwudG9waWNfdHlwZV0pXG59XG5cbmV4cG9ydCB7Y2hhdENoYW5uZWxUb0tleX1cbiIsIi8vIEBmbG93XG5pbXBvcnQge0JvdH0gZnJvbSAnLi9ib3QuanMnXG5pbXBvcnQgdHlwZSB7TWVzc2FnZXNIYW5kbGVyLCBDYkVycm9yfSBmcm9tICcuL3R5cGVzLmpzJ1xuXG5jbGFzcyBGdWxsV2F0Y2hlciB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgX2JvdDogQm90XG4gIF9vbk1lc3NhZ2VzOiBNZXNzYWdlc0hhbmRsZXJcbiAgX2xvb3BDb3VudDogbnVtYmVyXG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICBjb25zdHJ1Y3Rvcihhcmc6IHtib3Q6IEJvdCwgb25NZXNzYWdlczogTWVzc2FnZXNIYW5kbGVyfSk6IHZvaWQge1xuICAgIHRoaXMuX2JvdCA9IGFyZy5ib3RcbiAgICB0aGlzLl9vbk1lc3NhZ2VzID0gYXJnLm9uTWVzc2FnZXNcbiAgICB0aGlzLl9sb29wQ291bnQgPSAwXG4gICAgdGhpcy5fd2F0Y2hMb29wKClcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgX2NoZWNrRm9yTmV3TWVzc2FnZXNJbk9uZUNvbnZlcnNhdGlvbihjb252ZXJzYXRpb246IGFueSk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMuX2JvdC5jaGF0UmVhZCh7Y2hhbm5lbDogY29udmVyc2F0aW9uLmNoYW5uZWwsIHVucmVhZE9ubHk6IHRydWV9KS50aGVuKHJlcyA9PiB7XG4gICAgICAgIGlmIChyZXMgJiYgcmVzLnJhdGVsaW1pdHMpIHtcbiAgICAgICAgICB0aGlzLl9ib3QuX2dhc1ByZXNlcnZlci5wYXNzR2FzKHJlcy5yYXRlbGltaXRzKVxuICAgICAgICAgIHJlc29sdmUoKVxuICAgICAgICB9XG4gICAgICAgIGlmIChyZXMgJiYgcmVzLm1lc3NhZ2VzKSB7XG4gICAgICAgICAgY29uc3QgbmV3TWVzc2FnZXMgPSByZXMubWVzc2FnZXNcbiAgICAgICAgICBjb25zb2xlLmxvZyhgZm91bmQ6ICR7bmV3TWVzc2FnZXMubGVuZ3RofSBuZXdNZXNzYWdlczogJHtjb252ZXJzYXRpb24uY2hhbm5lbH1gKVxuICAgICAgICAgIGlmIChyZXMubWVzc2FnZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLl9vbk1lc3NhZ2VzKHttZXNzYWdlczogbmV3TWVzc2FnZXMsIGNoYW5uZWw6IGNvbnZlcnNhdGlvbi5jaGFubmVsfSlcbiAgICAgICAgICAgIHJlc29sdmUoKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9KVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICBfY2hlY2tGb3JOZXdNZXNzYWdlc0luQ29udmVyc2F0aW9ucyhhcmc6IHtjb252ZXJzYXRpb25zOiBhbnksIGluZGV4PzogbnVtYmVyfSk6IFByb21pc2U8YW55PiB7XG4gICAgY29uc3Qge2NvbnZlcnNhdGlvbnN9ID0gYXJnXG4gICAgbGV0IHtpbmRleH0gPSBhcmdcbiAgICBpZiAoIWluZGV4KSB7XG4gICAgICBpbmRleCA9IDBcbiAgICB9XG4gICAgaWYgKGluZGV4ID09PSBjb252ZXJzYXRpb25zLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShudWxsKVxuICAgIH1cbiAgICBjb25zb2xlLmxvZyhgQ0hFQ0tJTkcgJHtpbmRleH0sICR7Y29udmVyc2F0aW9uc1tpbmRleF0uY2hhbm5lbH0gZm9yIG5ldyBtZXNzYWdlc2ApXG4gICAgcmV0dXJuIHRoaXMuX2NoZWNrRm9yTmV3TWVzc2FnZXNJbk9uZUNvbnZlcnNhdGlvbihjb252ZXJzYXRpb25zW2luZGV4XSkudGhlbigoKSA9PiB7XG4gICAgICBpZiAoaW5kZXggKyAxID09PSBjb252ZXJzYXRpb25zLmxlbmd0aCkge1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuX2NoZWNrRm9yTmV3TWVzc2FnZXNJbkNvbnZlcnNhdGlvbnMoe2NvbnZlcnNhdGlvbnMsIGluZGV4OiBpbmRleCArIDF9KVxuICAgIH0pXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIF9jaGVja0Zvck5ld01lc3NhZ2VzSW5BbGxDb252ZXJzYXRpb25zKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuIHRoaXMuX2JvdFxuICAgICAgLmNoYXRMaXN0KHt9KVxuICAgICAgLnRoZW4ocmVzID0+IHtcbiAgICAgICAgaWYgKHJlcyAmJiByZXMucmF0ZWxpbWl0cykge1xuICAgICAgICAgIHRoaXMuX2JvdC5fZ2FzUHJlc2VydmVyLnBhc3NHYXMocmVzLnJhdGVsaW1pdHMpXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlcyAmJiByZXMuY29udmVyc2F0aW9ucykge1xuICAgICAgICAgIGNvbnN0IGNvbnZlcnNhdGlvbnMgPSByZXMuY29udmVyc2F0aW9ucy5maWx0ZXIoYyA9PiB7XG4gICAgICAgICAgICByZXR1cm4gYy51bnJlYWRcbiAgICAgICAgICB9KVxuICAgICAgICAgIGNvbnNvbGUubG9nKGBPZiAke3Jlcy5jb252ZXJzYXRpb25zLmxlbmd0aH0gdGhlcmUgYXJlICR7Y29udmVyc2F0aW9ucy5sZW5ndGh9IHRoYXQgYXJlIHVucmVhZC5gKVxuICAgICAgICAgIHJldHVybiB0aGlzLl9jaGVja0Zvck5ld01lc3NhZ2VzSW5Db252ZXJzYXRpb25zKHtjb252ZXJzYXRpb25zfSlcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIC5jYXRjaChlcnIgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZygnR290IGVycm9yIGdldHRpbmcgY2hhdCBsaXN0OicsIGVycilcbiAgICAgIH0pXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIF93YXRjaExvb3AoKTogdm9pZCB7XG4gICAgdGhpcy5fY2hlY2tGb3JOZXdNZXNzYWdlc0luQWxsQ29udmVyc2F0aW9ucy50aGVuKCgpID0+IHtcbiAgICAgIGNvbnN0IGRlbGF5ID0gdGhpcy5fYm90Ll9nYXNQcmVzZXJ2ZXIucmVjb21tZW5kZWRXYWl0KClcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLl9sb29wQ291bnQrK1xuICAgICAgICB0aGlzLl93YXRjaExvb3AoKVxuICAgICAgfSwgZGVsYXkpXG4gICAgfSlcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG59XG5cbmV4cG9ydCB7RnVsbFdhdGNoZXJ9XG4iLCIvLyBAZmxvd1xubGV0IHR3ZWFrYWJsZXMgPSB7XG4gIE1JTl9DSEFOTkVMX1dBVENIX0xPT1A6IDEwMDAsXG4gIE1BWF9DSEFOTkVMX1dBVENIX0xPT1A6IDYwMDAwLFxuICBERUZBVUxUX0dBUzogNTAwLFxuICBERUZBVUxUX1RJTUVfTEVGVDogMTUwMCxcbiAgVEFSR0VUX0dBU19SRU1BSU5JTkc6IDEwMCxcbiAgU0FGRVRZX0JVRkZFUjogMS41LFxuICBHQVNfTU9OSVRPUl9XSU5ET1c6IDEwMDAwLFxuICBHQVNfQURKX01VTFQ6IDEuMSxcbn1cblxuZXhwb3J0IGRlZmF1bHQgdHdlYWthYmxlc1xuIiwiLy8gQGZsb3dcbmltcG9ydCB0d2Vha2FibGVzIGZyb20gJy4vdHdlYWthYmxlcy5qcydcblxuY2xhc3MgR2FzUHJlc2VydmVyIHtcblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIF9sYXN0UGFzc2VkR2FzOiBBcnJheTxhbnk+O1xuICBfY3VycmVudFdhaXQ6IG51bWJlcjtcblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIGNvbnN0cnVjdG9yICgpIDogdm9pZCB7XG4gICAgdGhpcy5fbGFzdFBhc3NlZEdhcyA9IFtdXG4gICAgdGhpcy5fY3VycmVudFdhaXQgPSB0d2Vha2FibGVzLk1JTl9DSEFOTkVMX1dBVENIX0xPT1BcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgcGFzc0dhcyAocmF0ZUxpbWl0czogQXJyYXk8YW55PikgOiB2b2lkIHtcbiAgICB0aGlzLl9sYXN0UGFzc2VkR2FzLnB1c2gocmF0ZUxpbWl0c1swXSkgLy8gbGV0J3MganVzdCB0YWtlIHRoZSBmaXJzdCBmb3Igbm93XG4gICAgdGhpcy5fZmlsdGVyT2xkR2FzKClcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgcmVjb21tZW5kZWRXYWl0ICgpIDogbnVtYmVyIHtcbiAgICBsZXQgc3BlZWQgPSB0aGlzLl9nZXRDdXJyZW50U3BlZWQoKVxuICAgIGxldCBnYXMgPSB0aGlzLl9nZXRSZW1haW5pbmdHYXMoKVxuICAgIGxldCBnYXNfbGVmdF93aXRoX2J1ZmZlciA9IE1hdGgubWF4KDAsIGdhcyAtIHR3ZWFrYWJsZXMuVEFSR0VUX0dBU19SRU1BSU5JTkcpXG4gICAgbGV0IHRpbWVMZWZ0ID0gdGhpcy5fZ2V0VGltZVRpbGxSZXNldCgpXG4gICAgLy8gdGhpcy5fY3VycmVudFdhaXQgPSAxMDAwICogKHNwZWVkICogdGltZUxlZnQgLyBnYXMpICogdHdlYWthYmxlcy5TQUZFVFlfQlVGRkVSXG4gICAgaWYgKHNwZWVkICogdGltZUxlZnQgPiBnYXNfbGVmdF93aXRoX2J1ZmZlcikge1xuICAgICAgdGhpcy5fY3VycmVudFdhaXQgKj0gdHdlYWthYmxlcy5HQVNfQURKX01VTFRcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fY3VycmVudFdhaXQgLz0gdHdlYWthYmxlcy5HQVNfQURKX01VTFRcbiAgICB9XG4gICAgdGhpcy5fY3VycmVudFdhaXQgPSBNYXRoLm1heCh0d2Vha2FibGVzLk1JTl9DSEFOTkVMX1dBVENIX0xPT1AsIHRoaXMuX2N1cnJlbnRXYWl0KVxuICAgIHRoaXMuX2N1cnJlbnRXYWl0ID0gTWF0aC5taW4odHdlYWthYmxlcy5NQVhfQ0hBTk5FTF9XQVRDSF9MT09QLCB0aGlzLl9jdXJyZW50V2FpdClcbiAgICBjb25zb2xlLmxvZyhgLi4uc3BlZWQ9JHtzcGVlZC50b0ZpeGVkKDIpfSwgZ2FzPSR7Z2FzfSwgdGltZUxlZnQ9JHt0aW1lTGVmdH0sIGN1cnJlbnRXYWl0PSR7dGhpcy5fY3VycmVudFdhaXR9LCBoaXN0b3J5PSR7dGhpcy5fbGFzdFBhc3NlZEdhcy5sZW5ndGh9YClcbiAgICByZXR1cm4gdGhpcy5fY3VycmVudFdhaXRcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgX2ZpbHRlck9sZEdhcyAoKSA6IHZvaWQge1xuICAgIGxldCBpbmQgPSAwXG4gICAgLy8gdGhyb3cgYXdheSBhbnkgZGF0YSBiZWZvcmUgYSByZXNldFxuICAgIGZvciAoaW5kID0gdGhpcy5fbGFzdFBhc3NlZEdhcy5sZW5ndGggLSAyOyBpbmQgPj0gMDsgaW5kLS0pIHtcbiAgICAgIGxldCBsYXRlc3QgPSB0aGlzLl9sYXN0UGFzc2VkR2FzW3RoaXMuX2xhc3RQYXNzZWRHYXMubGVuZ3RoIC0gMV1cbiAgICAgIGxldCBjdXJyID0gdGhpcy5fbGFzdFBhc3NlZEdhc1tpbmRdXG4gICAgICBpZiAoY3Vyci5nYXMgPCBsYXRlc3QuZ2FzIHx8IGN1cnIucmVzZXQgPCBsYXRlc3QucmVzZXQpIHtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGluZCA+PSAwKSB7XG4gICAgICBjb25zb2xlLmxvZygnQkVGT1JFIEdBUyBDTEVBTlVQJywgdGhpcy5fbGFzdFBhc3NlZEdhcylcbiAgICAgIHRoaXMuX2xhc3RQYXNzZWRHYXMuc3BsaWNlKDAsIChpbmQgKyAxKSlcbiAgICAgIGNvbnNvbGUubG9nKCdBRlRFUiBHQVMgQ0xFQU5VUCcsIHRoaXMuX2xhc3RQYXNzZWRHYXMpXG4gICAgfVxuICAgIC8vIG5vdyB0aHJvdyBhd2F5IGFueXRoaW5nIG92ZXIgYSBjZXJ0YWluIGFnZVxuICAgIGlmICh0aGlzLl9sYXN0UGFzc2VkR2FzLmxlbmd0aCA+IDIpIHtcbiAgICAgIGxldCBrZWVwZXJzID0gdGhpcy5fbGFzdFBhc3NlZEdhcy5zbGljZSgtMilcbiAgICAgIGxldCBjYW5kaWRhdGVzID0gdGhpcy5fbGFzdFBhc3NlZEdhcy5zbGljZSgwLCAtMilcbiAgICAgIGNhbmRpZGF0ZXMgPSBjYW5kaWRhdGVzLmZpbHRlcigoYykgPT4gYy5yZXNldCA8IGtlZXBlcnNbMV0ucmVzZXQgKyB0d2Vha2FibGVzLkdBU19NT05JVE9SX1dJTkRPVyAvIDEwMDApXG4gICAgICB0aGlzLl9sYXN0UGFzc2VkR2FzID0gY2FuZGlkYXRlcy5jb25jYXQoa2VlcGVycylcbiAgICAgIC8vY29uc29sZS5sb2codGhpcy5fbGFzdFBhc3NlZEdhcylcbiAgICB9XG4gICAgcmV0dXJuXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIF9nZXRDdXJyZW50U3BlZWQgKCkgOiBudW1iZXIge1xuICAgIGlmICh0aGlzLl9sYXN0UGFzc2VkR2FzLmxlbmd0aCA8IDIpIHtcbiAgICAgIHJldHVybiAxXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGcgPSB0aGlzLl9sYXN0UGFzc2VkR2FzXG4gICAgICBjb25zdCBnbGFzdCA9IGdbZy5sZW5ndGggLSAxXVxuICAgICAgY29uc3Qgc3BlZWQgPSAoZ1swXS5nYXMgLSBnbGFzdC5nYXMpIC8gKDEgKyBnWzBdLnJlc2V0IC0gZ2xhc3QucmVzZXQpXG4gICAgICByZXR1cm4gc3BlZWRcbiAgICB9XG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIF9nZXRSZW1haW5pbmdHYXMgKCkgOiBudW1iZXIge1xuICAgIGlmICh0aGlzLl9sYXN0UGFzc2VkR2FzLmxlbmd0aCA8IDEpIHtcbiAgICAgIHJldHVybiB0d2Vha2FibGVzLkRFRkFVTFRfR0FTXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLl9sYXN0UGFzc2VkR2FzW3RoaXMuX2xhc3RQYXNzZWRHYXMubGVuZ3RoIC0gMV0uZ2FzXG4gICAgfVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICBfZ2V0VGltZVRpbGxSZXNldCAoKSA6IG51bWJlciB7XG4gICAgaWYgKHRoaXMuX2xhc3RQYXNzZWRHYXMubGVuZ3RoIDwgMSkge1xuICAgICAgcmV0dXJuIHR3ZWFrYWJsZXMuREVGQVVMVF9USU1FX0xFRlRcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuX2xhc3RQYXNzZWRHYXNbdGhpcy5fbGFzdFBhc3NlZEdhcy5sZW5ndGggLSAxXS5yZXNldFxuICAgIH1cbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbn1cblxuZXhwb3J0IHtHYXNQcmVzZXJ2ZXJ9XG4iLCIvLyBAZmxvd1xuaW1wb3J0IHtzcGF3bn0gZnJvbSAnY2hpbGRfcHJvY2VzcydcblxudHlwZSBQYXJhbXMgPSB7fFxuICBhcmdzOiBzdHJpbmdbXSxcbiAgc3RkaW5CdWZmZXI/OiBCdWZmZXIsXG58fVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBrZXliYXNlRXhlYyhwYXJhbXM6IFBhcmFtcyk6IFByb21pc2U8YW55PiB7XG4gIGNvbnN0IGNoaWxkID0gc3Bhd24oJ2tleWJhc2UnLCBwYXJhbXMuYXJncylcbiAgY29uc3Qgb3V0QnVmZmVyczogQnVmZmVyW10gPSBbXVxuICBsZXQgb3V0OiA/c3RyaW5nID0gbnVsbFxuXG4gIGlmIChwYXJhbXMuc3RkaW5CdWZmZXIpIHtcbiAgICBjaGlsZC5zdGRpbi53cml0ZShwYXJhbXMuc3RkaW5CdWZmZXIpXG4gICAgY2hpbGQuc3RkaW4uZW5kKClcbiAgfVxuXG4gIGNoaWxkLnN0ZG91dC5vbignZGF0YScsIGNodW5rID0+IHtcbiAgICBvdXRCdWZmZXJzLnB1c2goY2h1bmspXG4gIH0pXG5cbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjaGlsZC5vbignY2xvc2UnLCBjb2RlID0+IHtcbiAgICAgIGlmIChjb2RlKSB7XG4gICAgICAgIHJlamVjdChuZXcgRXJyb3IoYGV4aXRlZCB3aXRoIGNvZGUgJHtjb2RlfWApKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3Qgc3Rkb3V0ID0gQnVmZmVyLmNvbmNhdChvdXRCdWZmZXJzKS50b1N0cmluZygndXRmOCcpXG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBvdXQgPSBzdGRvdXQgPT09ICcnID8gc3Rkb3V0IDogSlNPTi5wYXJzZShzdGRvdXQpXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICByZWplY3QoZSlcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXNvbHZlKG91dClcbiAgICB9KVxuICB9KVxufVxuIiwiLy8gQGZsb3dcbmltcG9ydCB7Z2V0S2V5YmFzZVVzZXJuYW1lQW5kRGV2aWNlbmFtZX0gZnJvbSAnLi9rZXliYXNlLXN0YXR1cy5qcydcbmltcG9ydCB7cnVuQXBpQ29tbWFuZH0gZnJvbSAnLi9jaGF0LWFwaS5qcydcbmltcG9ydCB7Q2hhbm5lbFdhdGNoZXJ9IGZyb20gJy4vY2hhbm5lbC13YXRjaGVyLmpzJ1xuaW1wb3J0IHtjaGF0Q2hhbm5lbFRvS2V5fSBmcm9tICcuL3V0aWxzLmpzJ1xuaW1wb3J0IHtGdWxsV2F0Y2hlcn0gZnJvbSAnLi9mdWxsLXdhdGNoZXIuanMnXG5pbXBvcnQge0dhc1ByZXNlcnZlcn0gZnJvbSAnLi9nYXMtcHJlc2VydmVyLmpzJ1xuaW1wb3J0IHR5cGUge01lc3NhZ2VzSGFuZGxlciwgRGV2aWNlVXNlcm5hbWVQYWlyLCBDaGF0Q2hhbm5lbH0gZnJvbSAnLi90eXBlcy5qcydcbmltcG9ydCB0eXBlIHtBcGlDb21tYW5kQXJnfSBmcm9tICcuL2NoYXQtYXBpLmpzJ1xuaW1wb3J0IGtleWJhc2VFeGVjIGZyb20gJy4va2V5YmFzZS1leGVjJ1xuXG50eXBlIEluaXRPcHRpb25zID0ge3xcbiAgdXNlcm5hbWU6IHN0cmluZyxcbiAgcGFwZXJrZXk6IHN0cmluZyxcbiAgdmVyYm9zZT86IGJvb2xlYW4sXG58fVxuXG50eXBlIENoYXRMaXN0T3B0aW9ucyA9IHt8XG4gIG51bWJlcj86IG51bWJlcixcbiAgdGltZT86IHN0cmluZyxcbiAgc2luY2U/OiBzdHJpbmcsXG4gIGluY2x1ZGVIaWRkZW4/OiBib29sZWFuLFxuICB0b3BpY1R5cGU/OiBzdHJpbmcsXG4gIGNoYW5uZWw/OiBzdHJpbmcsXG4gIHB1YmxpYz86IGJvb2xlYW4sXG4gIHByaXZhdGU/OiBib29sZWFuLFxufH1cblxuLy8gLS1leHBsb2RpbmctbGlmZXRpbWUgaW50ZW50aW9uYWxseSBsZWZ0IG91dFxudHlwZSBDaGF0U2VuZE9wdGlvbnMgPSB7fFxuICB0b3BpY1R5cGU/OiBzdHJpbmcsXG4gIGNoYW5uZWw/OiBzdHJpbmcsXG4gIG1lc3NhZ2U/OiBzdHJpbmcsXG4gIHB1YmxpYz86IGJvb2xlYW4sXG4gIHByaXZhdGU/OiBib29sZWFuLFxuICBzZXRIZWFkbGluZT86IHN0cmluZyxcbiAgY2xlYXJIZWFkbGluZT86IHN0cmluZyxcbiAgbm9uYmxvY2s/OiBib29sZWFuLFxufH1cblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5jbGFzcyBCb3Qge1xuICBfZFBhaXI6ID9EZXZpY2VVc2VybmFtZVBhaXJcbiAgX2luaXRpYWxpemVkOiBib29sZWFuXG4gIF9jaGFubmVsV2F0Y2hlcnM6IE1hcDxzdHJpbmcsIENoYW5uZWxXYXRjaGVyPlxuICBfZnVsbFdhdGNoZXI6ID9GdWxsV2F0Y2hlclxuICBfZ2FzUHJlc2VydmVyOiBHYXNQcmVzZXJ2ZXJcbiAgX3ZlcmJvc2U6IGJvb2xlYW5cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX3ZlcmJvc2UgPSBmYWxzZVxuICAgIHRoaXMuX2RQYWlyID0gbnVsbFxuICAgIHRoaXMuX2luaXRpYWxpemVkID0gZmFsc2VcbiAgICB0aGlzLl9jaGFubmVsV2F0Y2hlcnMgPSBuZXcgTWFwKClcbiAgICB0aGlzLl9mdWxsV2F0Y2hlciA9IG51bGxcbiAgICB0aGlzLl9nYXNQcmVzZXJ2ZXIgPSBuZXcgR2FzUHJlc2VydmVyKClcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgaW5pdChvcHRpb25zOiBJbml0T3B0aW9ucyk6IFByb21pc2U8YW55PiB7XG4gICAgdGhpcy5fdmVyYm9zZSA9IG9wdGlvbnMudmVyYm9zZSB8fCBmYWxzZVxuXG4gICAgcmV0dXJuIGtleWJhc2VFeGVjKHtcbiAgICAgIGFyZ3M6IFsnb25lc2hvdCcsICctLXVzZXJuYW1lJywgb3B0aW9ucy51c2VybmFtZSwgJy0tcGFwZXJrZXknLCBvcHRpb25zLnBhcGVya2V5XSxcbiAgICB9KS50aGVuKCgpID0+IHtcbiAgICAgIGdldEtleWJhc2VVc2VybmFtZUFuZERldmljZW5hbWUoKS50aGVuKGN1cnJlbnREUGFpciA9PiB7XG4gICAgICAgIGlmIChjdXJyZW50RFBhaXIpIHtcbiAgICAgICAgICB0aGlzLl9kUGFpciA9IGN1cnJlbnREUGFpclxuICAgICAgICAgIHRoaXMuX2xvZyhgaW50aWFsaXplZCAke2N1cnJlbnREUGFpci51c2VybmFtZX0gKGRldmljZT0ke2N1cnJlbnREUGFpci5kZXZpY2VuYW1lfSlgKVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2luaXRpYWxpemVkID0gdHJ1ZVxuICAgICAgfSlcbiAgICB9KVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICBjaGF0TGlzdChvcHRpb25zOiBDaGF0TGlzdE9wdGlvbnMpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybiB0aGlzLl9zYWZlbHlSdW5BcGlDb21tYW5kKHttZXRob2Q6ICdsaXN0Jywgb3B0aW9uc30pXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIGNoYXRTZW5kKG9wdGlvbnM6IENoYXRTZW5kT3B0aW9ucyk6IFByb21pc2U8YW55PiB7XG4gICAgY29uc3Qge2NoYW5uZWwsIG1lc3NhZ2V9ID0gb3B0aW9uc1xuICAgIHJldHVybiB0aGlzLl9zYWZlbHlSdW5BcGlDb21tYW5kKHttZXRob2Q6ICdzZW5kJywgb3B0aW9uczoge2NoYW5uZWwsIG1lc3NhZ2V9fSlcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgY2hhdFJlYWQob3B0aW9uczoge2NoYW5uZWw6IENoYXRDaGFubmVsLCB1bnJlYWRPbmx5PzogYm9vbGVhbiwgcGVlaz86IGJvb2xlYW59KTogUHJvbWlzZTxhbnk+IHtcbiAgICBjb25zdCB7Y2hhbm5lbH0gPSBvcHRpb25zXG4gICAgbGV0IHBlZWs6IGJvb2xlYW4gPSBmYWxzZVxuICAgIGxldCB1bnJlYWRPbmx5OiBib29sZWFuID0gZmFsc2VcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMucGVlayAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHBlZWsgPSBvcHRpb25zLnBlZWtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLnVucmVhZE9ubHkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB1bnJlYWRPbmx5ID0gb3B0aW9ucy51bnJlYWRPbmx5XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9zYWZlbHlSdW5BcGlDb21tYW5kKHttZXRob2Q6ICdyZWFkJywgb3B0aW9uczoge2NoYW5uZWwsIHBlZWssIHVucmVhZE9ubHl9fSlcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgY2hhdERlbGV0ZShvcHRpb25zOiB7Y2hhbm5lbDogQ2hhdENoYW5uZWwsIG1lc3NhZ2VJZDogbnVtYmVyfSk6IFByb21pc2U8YW55PiB7XG4gICAgY29uc3Qge2NoYW5uZWwsIG1lc3NhZ2VJZH0gPSBvcHRpb25zXG4gICAgcmV0dXJuIHRoaXMuX3NhZmVseVJ1bkFwaUNvbW1hbmQoe21ldGhvZDogJ2RlbGV0ZScsIG9wdGlvbnM6IHtjaGFubmVsLCBtZXNzYWdlSWR9fSlcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgbXlJbmZvKCk6ID9EZXZpY2VVc2VybmFtZVBhaXIge1xuICAgIHJldHVybiB0aGlzLl9kUGFpclxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICB3YXRjaENoYW5uZWxGb3JOZXdNZXNzYWdlcyhvcHRpb25zOiB7Y2hhbm5lbDogQ2hhdENoYW5uZWwsIG9uTWVzc2FnZXM6IE1lc3NhZ2VzSGFuZGxlcn0pIHtcbiAgICBjb25zdCB7Y2hhbm5lbCwgb25NZXNzYWdlc30gPSBvcHRpb25zXG4gICAgY29uc3Qga2V5ID0gY2hhdENoYW5uZWxUb0tleShjaGFubmVsKVxuICAgIGlmICh0aGlzLl9jaGFubmVsV2F0Y2hlcnMuaGFzKGtleSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgYWxyZWFkeSB3YXRjaGluZyB0aGUgY2hhbm5lbCAke0pTT04uc3RyaW5naWZ5KGNoYW5uZWwpfWApXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2NoYW5uZWxXYXRjaGVycy5zZXQoa2V5LCBuZXcgQ2hhbm5lbFdhdGNoZXIoe2NoYW5uZWwsIG9uTWVzc2FnZXMsIGJvdDogdGhpc30pKVxuICAgIH1cbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgd2F0Y2hBbGxDaGFubmVsc0Zvck5ld01lc3NhZ2VzKG9wdGlvbnM6IHtvbk1lc3NhZ2VzOiBNZXNzYWdlc0hhbmRsZXJ9KSB7XG4gICAgY29uc3Qge29uTWVzc2FnZXN9ID0gb3B0aW9uc1xuICAgIGlmICh0aGlzLl9mdWxsV2F0Y2hlcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBhbHJlYWR5IHdhdGNoaW5nIHdhdGNoaW5nOyBjYW4ndCBoYXZlIDIgbWVzc2FnZSB3YXRjaGVyc31gKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9mdWxsV2F0Y2hlciA9IG5ldyBGdWxsV2F0Y2hlcih7b25NZXNzYWdlcywgYm90OiB0aGlzfSlcbiAgICB9XG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vICAtIG1ha2Ugc3VyZSBpbml0ZWQgb2tcbiAgLy8gIC0gbWFrZSBzdXJlIHVzZXIgaXMgc3RpbGwgdGhlIHNhbWUgdXNlciBzaW5jZSBpbml0XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgX2xvZyhtc2c6IHN0cmluZyk6IHZvaWQge1xuICAgIGlmICh0aGlzLl92ZXJib3NlKSB7XG4gICAgICBjb25zb2xlLmxvZyhtc2cpXG4gICAgfVxuICB9XG5cbiAgX2NoZWNrVXNlckFuZEluaXQoKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgZ2V0S2V5YmFzZVVzZXJuYW1lQW5kRGV2aWNlbmFtZSgpLnRoZW4oY3VycmVudERQYWlyID0+IHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICF0aGlzLl9pbml0aWFsaXplZCB8fFxuICAgICAgICAgICFjdXJyZW50RFBhaXIgfHxcbiAgICAgICAgICAhdGhpcy5fZFBhaXIgfHxcbiAgICAgICAgICBjdXJyZW50RFBhaXIudXNlcm5hbWUgIT09IHRoaXMuX2RQYWlyLnVzZXJuYW1lXG4gICAgICAgICkge1xuICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoYFVoLW9oLCB1c2VybmFtZSBoYXMgY2hhbmdlZCBvciB3ZSBuZXZlciBpbml0aWFsaXplZCBjb3JyZWN0bHkuYCkpXG4gICAgICAgIH1cbiAgICAgICAgcmVzb2x2ZSgpXG4gICAgICB9KVxuICAgIH0pXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIF9zYWZlbHlSdW5BcGlDb21tYW5kKGFyZzogQXBpQ29tbWFuZEFyZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMuX2NoZWNrVXNlckFuZEluaXQoKS50aGVuKCgpID0+IHtcbiAgICAgICAgcmV0dXJuIHJ1bkFwaUNvbW1hbmQoYXJnKVxuICAgICAgICAgIC50aGVuKHJlcyA9PiB7XG4gICAgICAgICAgICByZXNvbHZlKHJlcylcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5jYXRjaChlcnIgPT4gcmVqZWN0KGVycikpXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn1cblxuZXhwb3J0IHtCb3R9XG4iLCIvLyBAZmxvd1xuaW1wb3J0IHtCb3R9IGZyb20gJy4vYm90LmpzJ1xuXG5leHBvcnQge0JvdH1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///1\n')}])});