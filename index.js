!function(Q,t){if("object"==typeof exports&&"object"==typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var F=t();for(var B in F)("object"==typeof exports?exports:Q)[B]=F[B]}}(global,function(){return function(Q){var t={};function F(B){if(t[B])return t[B].exports;var s=t[B]={i:B,l:!1,exports:{}};return Q[B].call(s.exports,s,s.exports,F),s.l=!0,s.exports}return F.m=Q,F.c=t,F.d=function(Q,t,B){F.o(Q,t)||Object.defineProperty(Q,t,{enumerable:!0,get:B})},F.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},F.t=function(Q,t){if(1&t&&(Q=F(Q)),8&t)return Q;if(4&t&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var B=Object.create(null);if(F.r(B),Object.defineProperty(B,"default",{enumerable:!0,value:Q}),2&t&&"string"!=typeof Q)for(var s in Q)F.d(B,s,function(t){return Q[t]}.bind(null,s));return B},F.n=function(Q){var t=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return F.d(t,"a",t),t},F.o=function(Q,t){return Object.prototype.hasOwnProperty.call(Q,t)},F.p="",F(F.s=1)}([function(module,exports){eval('module.exports = require("child_process");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJjaGlsZF9wcm9jZXNzXCI/M2RhNyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiY2hpbGRfcHJvY2Vzc1wiKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///0\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: external "child_process"\nvar external_child_process_ = __webpack_require__(0);\n\n// CONCATENATED MODULE: ./lib/exec-to-json.js\n\n\nvar exec_to_json_execToJson = function execToJson(params) {\n  var stdinBuffer = params.stdinBuffer;\n  var out = null;\n  var outBuffers = [];\n  var child = Object(external_child_process_["spawn"])(params.command, params.args || []);\n\n  if (stdinBuffer) {\n    child.stdin.write(stdinBuffer);\n    child.stdin.end();\n  }\n\n  child.stdout.on(\'data\', function (chunk) {\n    outBuffers.push(chunk);\n  });\n  return new Promise(function (resolve, reject) {\n    child.on(\'close\', function (code) {\n      if (code) {\n        reject(new Error("exited with code ".concat(code)));\n      } else {\n        var stdout = Buffer.concat(outBuffers).toString(\'utf8\');\n\n        try {\n          out = JSON.parse(stdout);\n        } catch (e) {\n          reject(e);\n        }\n      }\n\n      resolve(out);\n    });\n  });\n};\n\n\n// CONCATENATED MODULE: ./lib/keybase-status.js\n\n\n// ----------------------------------------------------------------------------\n// calls back with a JSON object describing the user\'s\n// status with Keybase. For example, status.Username and status.Device.name\n// may be of interest\n// ----------------------------------------------------------------------------\nvar keybase_status_getKeybaseNativeStatusJson = function getKeybaseNativeStatusJson() {\n  return exec_to_json_execToJson({\n    command: \'keybase\',\n    args: [\'status\', \'-j\']\n  });\n}; // ----------------------------------------------------------------------------\n// calls back with just {username, devicename}, if fully logged in and\n// unlocked.\n// ----------------------------------------------------------------------------\n\n\nvar getKeybaseUsernameAndDevicename = function getKeybaseUsernameAndDevicename() {\n  return new Promise(function (resolve, reject) {\n    keybase_status_getKeybaseNativeStatusJson().then(function (status) {\n      if (status && status.Username && status.Device && status.Device.name) {\n        resolve({\n          username: status.Username,\n          devicename: status.Device.name\n        });\n      } else {\n        reject(new Error(\'failed to get username + device name\'));\n      }\n    });\n  });\n};\n\n\n// CONCATENATED MODULE: ./lib/constants.js\nvar CHAT_API_VERSION = 1;\n\n// CONCATENATED MODULE: ./lib/chat-api.js\n\n\n\n// ----------------------------------------------------------------------------\n// calls back with a JSON object describing the user\'s\n// status with Keybase. For example, status.Username and status.Device.name\n// may be of interest\n// ----------------------------------------------------------------------------\nvar chat_api_runApiCommand = function runApiCommand(arg) {\n  var input = {\n    method: arg.method,\n    params: {\n      version: CHAT_API_VERSION,\n      options: arg.options\n    }\n  };\n  return new Promise(function (resolve, reject) {\n    var inputString = JSON.stringify(input);\n    var size = inputString.length;\n    exec_to_json_execToJson({\n      command: \'keybase\',\n      args: [\'chat\', \'api\'],\n      stdinBuffer: Buffer.alloc(size, inputString, \'utf8\')\n    }).then(function (o) {\n      var res = null;\n\n      if (o && o.result) {\n        res = o.result;\n      } else if (o && o.error) {\n        var oError = o.error;\n        reject(new Error(oError.message || oError.toString()));\n      } else {\n        reject(new Error("Unknown error parsing result - no \\"result\\" field"));\n      }\n\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n};\n\n\n// CONCATENATED MODULE: ./lib/channel-watcher.js\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\nvar ChannelWatcher =\n/*#__PURE__*/\nfunction () {\n  // --------------------------------------------------------------------------\n  // --------------------------------------------------------------------------\n  function ChannelWatcher(arg) {\n    _classCallCheck(this, ChannelWatcher);\n\n    this._bot = arg.bot;\n    this._onMessages = arg.onMessages;\n    this._channel = arg.channel;\n    this._highestId = -1;\n    this._loopCount = 0;\n\n    this._watchLoop();\n  } // --------------------------------------------------------------------------\n\n\n  _createClass(ChannelWatcher, [{\n    key: "_didISendMessage",\n    value: function _didISendMessage(m) {\n      var myInfo = this._bot.myInfo();\n\n      return myInfo ? myInfo.username === m.msg.sender.username : false;\n    } // --------------------------------------------------------------------------\n\n  }, {\n    key: "_checkForNewMessages",\n    value: function _checkForNewMessages(cb) {\n      var _this = this;\n\n      var newMessages = [];\n\n      this._bot.chatRead({\n        channel: this._channel,\n        unreadOnly: true\n      }).then(function (res) {\n        if (res && res.ratelimits) {\n          _this._bot._gasPreserver.passGas(res.ratelimits);\n        }\n\n        if (res && res.messages) {\n          newMessages = res.messages;\n          _this._highestId = res.messages.reduce(function (a, m) {\n            return Math.max(a, m.msg.id);\n          }, _this._highestId);\n        }\n\n        console.log("loopCount: ".concat(_this._loopCount, " newMessages: ").concat(newMessages.length));\n\n        if (newMessages.length) {\n          _this._onMessages({\n            messages: newMessages,\n            channel: _this._channel\n          });\n        }\n      }).catch(function (err) {\n        console.log(err);\n      });\n    } // --------------------------------------------------------------------------\n\n  }, {\n    key: "_watchLoop",\n    value: function _watchLoop() {\n      var _this2 = this;\n\n      console.log("".concat(this._loopCount, " \'").concat(this._channel.name, " entering watchLoop"));\n\n      this._checkForNewMessages(function () {\n        var delay = _this2._bot._gasPreserver.recommendedWait();\n\n        console.log("".concat(_this2._loopCount, " \'").concat(_this2._channel.name, " finishing watchLoop ").concat(delay));\n        setTimeout(function () {\n          _this2._loopCount++;\n\n          _this2._watchLoop();\n        }, delay);\n      });\n    }\n  }]);\n\n  return ChannelWatcher;\n}();\n\n\n// CONCATENATED MODULE: ./lib/utils.js\nfunction chatChannelToKey(channel) {\n  // TODO: come back to this\n  return JSON.stringify([channel.name, channel.public, channel.topic_type]);\n}\n\n\n// CONCATENATED MODULE: ./lib/full-watcher.js\nfunction full_watcher_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction full_watcher_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction full_watcher_createClass(Constructor, protoProps, staticProps) { if (protoProps) full_watcher_defineProperties(Constructor.prototype, protoProps); if (staticProps) full_watcher_defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\nvar FullWatcher =\n/*#__PURE__*/\nfunction () {\n  // --------------------------------------------------------------------------\n  // --------------------------------------------------------------------------\n  function FullWatcher(arg) {\n    full_watcher_classCallCheck(this, FullWatcher);\n\n    this._bot = arg.bot;\n    this._onMessages = arg.onMessages;\n    this._loopCount = 0;\n\n    this._watchLoop();\n  } // --------------------------------------------------------------------------\n\n\n  full_watcher_createClass(FullWatcher, [{\n    key: "_checkForNewMessagesInOneConversation",\n    value: function _checkForNewMessagesInOneConversation(conversation) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        _this._bot.chatRead({\n          channel: conversation.channel,\n          unreadOnly: true\n        }).then(function (res) {\n          if (res && res.ratelimits) {\n            _this._bot._gasPreserver.passGas(res.ratelimits);\n\n            resolve();\n          }\n\n          if (res && res.messages) {\n            var newMessages = res.messages;\n            console.log("found: ".concat(newMessages.length, " newMessages: ").concat(conversation.channel));\n\n            if (res.messages.length) {\n              _this._onMessages({\n                messages: newMessages,\n                channel: conversation.channel\n              });\n\n              resolve();\n            }\n          }\n        });\n      });\n    } // --------------------------------------------------------------------------\n\n  }, {\n    key: "_checkForNewMessagesInConversations",\n    value: function _checkForNewMessagesInConversations(arg) {\n      var _this2 = this;\n\n      var conversations = arg.conversations;\n      var index = arg.index;\n\n      if (!index) {\n        index = 0;\n      }\n\n      if (index === conversations.length) {\n        return Promise.resolve(null);\n      }\n\n      console.log("CHECKING ".concat(index, ", ").concat(conversations[index].channel, " for new messages"));\n      return this._checkForNewMessagesInOneConversation(conversations[index]).then(function () {\n        if (index + 1 === conversations.length) {}\n\n        return _this2._checkForNewMessagesInConversations({\n          conversations: conversations,\n          index: index + 1\n        });\n      });\n    } // --------------------------------------------------------------------------\n\n  }, {\n    key: "_checkForNewMessagesInAllConversations",\n    value: function _checkForNewMessagesInAllConversations() {\n      var _this3 = this;\n\n      return this._bot.chatList({}).then(function (res) {\n        if (res && res.ratelimits) {\n          _this3._bot._gasPreserver.passGas(res.ratelimits);\n        }\n\n        if (res && res.conversations) {\n          var conversations = res.conversations.filter(function (c) {\n            return c.unread;\n          });\n          console.log("Of ".concat(res.conversations.length, " there are ").concat(conversations.length, " that are unread."));\n          return _this3._checkForNewMessagesInConversations({\n            conversations: conversations\n          });\n        }\n      }).catch(function (err) {\n        console.log(\'Got error getting chat list:\', err);\n      });\n    } // --------------------------------------------------------------------------\n\n  }, {\n    key: "_watchLoop",\n    value: function _watchLoop() {\n      var _this4 = this;\n\n      this._checkForNewMessagesInAllConversations.then(function () {\n        var delay = _this4._bot._gasPreserver.recommendedWait();\n\n        setTimeout(function () {\n          _this4._loopCount++;\n\n          _this4._watchLoop();\n        }, delay);\n      });\n    } // --------------------------------------------------------------------------\n\n  }]);\n\n  return FullWatcher;\n}();\n\n\n// CONCATENATED MODULE: ./lib/tweakables.js\nvar tweakables = {\n  MIN_CHANNEL_WATCH_LOOP: 1000,\n  MAX_CHANNEL_WATCH_LOOP: 60000,\n  DEFAULT_GAS: 500,\n  DEFAULT_TIME_LEFT: 1500,\n  TARGET_GAS_REMAINING: 100,\n  SAFETY_BUFFER: 1.5,\n  GAS_MONITOR_WINDOW: 10000,\n  GAS_ADJ_MULT: 1.1\n};\n/* harmony default export */ var lib_tweakables = (tweakables);\n// CONCATENATED MODULE: ./lib/gas-preserver.js\nfunction gas_preserver_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction gas_preserver_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction gas_preserver_createClass(Constructor, protoProps, staticProps) { if (protoProps) gas_preserver_defineProperties(Constructor.prototype, protoProps); if (staticProps) gas_preserver_defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\nvar gas_preserver_GasPreserver =\n/*#__PURE__*/\nfunction () {\n  // --------------------------------------------------------------------------\n  // --------------------------------------------------------------------------\n  function GasPreserver() {\n    gas_preserver_classCallCheck(this, GasPreserver);\n\n    this._lastPassedGas = [];\n    this._currentWait = lib_tweakables.MIN_CHANNEL_WATCH_LOOP;\n  } // --------------------------------------------------------------------------\n\n\n  gas_preserver_createClass(GasPreserver, [{\n    key: "passGas",\n    value: function passGas(rateLimits) {\n      this._lastPassedGas.push(rateLimits[0]); // let\'s just take the first for now\n\n\n      this._filterOldGas();\n    } // --------------------------------------------------------------------------\n\n  }, {\n    key: "recommendedWait",\n    value: function recommendedWait() {\n      var speed = this._getCurrentSpeed();\n\n      var gas = this._getRemainingGas();\n\n      var gas_left_with_buffer = Math.max(0, gas - lib_tweakables.TARGET_GAS_REMAINING);\n\n      var timeLeft = this._getTimeTillReset(); // this._currentWait = 1000 * (speed * timeLeft / gas) * tweakables.SAFETY_BUFFER\n\n\n      if (speed * timeLeft > gas_left_with_buffer) {\n        this._currentWait *= lib_tweakables.GAS_ADJ_MULT;\n      } else {\n        this._currentWait /= lib_tweakables.GAS_ADJ_MULT;\n      }\n\n      this._currentWait = Math.max(lib_tweakables.MIN_CHANNEL_WATCH_LOOP, this._currentWait);\n      this._currentWait = Math.min(lib_tweakables.MAX_CHANNEL_WATCH_LOOP, this._currentWait);\n      console.log("...speed=".concat(speed.toFixed(2), ", gas=").concat(gas, ", timeLeft=").concat(timeLeft, ", currentWait=").concat(this._currentWait, ", history=").concat(this._lastPassedGas.length));\n      return this._currentWait;\n    } // --------------------------------------------------------------------------\n\n  }, {\n    key: "_filterOldGas",\n    value: function _filterOldGas() {\n      var ind = 0; // throw away any data before a reset\n\n      for (ind = this._lastPassedGas.length - 2; ind >= 0; ind--) {\n        var latest = this._lastPassedGas[this._lastPassedGas.length - 1];\n        var curr = this._lastPassedGas[ind];\n\n        if (curr.gas < latest.gas || curr.reset < latest.reset) {\n          break;\n        }\n      }\n\n      if (ind >= 0) {\n        console.log(\'BEFORE GAS CLEANUP\', this._lastPassedGas);\n\n        this._lastPassedGas.splice(0, ind + 1);\n\n        console.log(\'AFTER GAS CLEANUP\', this._lastPassedGas);\n      } // now throw away anything over a certain age\n\n\n      if (this._lastPassedGas.length > 2) {\n        var keepers = this._lastPassedGas.slice(-2);\n\n        var candidates = this._lastPassedGas.slice(0, -2);\n\n        candidates = candidates.filter(function (c) {\n          return c.reset < keepers[1].reset + lib_tweakables.GAS_MONITOR_WINDOW / 1000;\n        });\n        this._lastPassedGas = candidates.concat(keepers); //console.log(this._lastPassedGas)\n      }\n\n      return;\n    } // --------------------------------------------------------------------------\n\n  }, {\n    key: "_getCurrentSpeed",\n    value: function _getCurrentSpeed() {\n      if (this._lastPassedGas.length < 2) {\n        return 1;\n      } else {\n        var g = this._lastPassedGas;\n        var glast = g[g.length - 1];\n        var speed = (g[0].gas - glast.gas) / (1 + g[0].reset - glast.reset);\n        return speed;\n      }\n    } // --------------------------------------------------------------------------\n\n  }, {\n    key: "_getRemainingGas",\n    value: function _getRemainingGas() {\n      if (this._lastPassedGas.length < 1) {\n        return lib_tweakables.DEFAULT_GAS;\n      } else {\n        return this._lastPassedGas[this._lastPassedGas.length - 1].gas;\n      }\n    } // --------------------------------------------------------------------------\n\n  }, {\n    key: "_getTimeTillReset",\n    value: function _getTimeTillReset() {\n      if (this._lastPassedGas.length < 1) {\n        return lib_tweakables.DEFAULT_TIME_LEFT;\n      } else {\n        return this._lastPassedGas[this._lastPassedGas.length - 1].reset;\n      }\n    } // --------------------------------------------------------------------------\n\n  }]);\n\n  return GasPreserver;\n}();\n\n\n// CONCATENATED MODULE: ./lib/keybase-exec.js\n\nfunction keybaseExec(params) {\n  var child = Object(external_child_process_["spawn"])(\'keybase\', params.args);\n  console.log(\'inside keybase exec\');\n  var outBuffers = [];\n  var out = null;\n\n  if (params.stdinBuffer) {\n    child.stdin.write(params.stdinBuffer);\n    child.stdin.end();\n  }\n\n  child.stdout.on(\'data\', function (chunk) {\n    outBuffers.push(chunk);\n  });\n  return new Promise(function (resolve, reject) {\n    child.on(\'close\', function (code) {\n      if (code) {\n        reject(new Error("exited with code ".concat(code)));\n      } else {\n        var stdout = Buffer.concat(outBuffers).toString(\'utf8\');\n\n        try {\n          out = stdout === \'\' ? stdout : JSON.parse(stdout);\n        } catch (e) {\n          reject(e);\n        }\n      }\n\n      resolve(out);\n    });\n  });\n}\n// CONCATENATED MODULE: ./lib/bot.js\nfunction bot_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction bot_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction bot_createClass(Constructor, protoProps, staticProps) { if (protoProps) bot_defineProperties(Constructor.prototype, protoProps); if (staticProps) bot_defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\n\n\n\n\n\n\n// ============================================================================\nvar bot_Bot =\n/*#__PURE__*/\nfunction () {\n  // --------------------------------------------------------------------------\n  function Bot() {\n    bot_classCallCheck(this, Bot);\n\n    this._verbose = false;\n    this._dPair = null;\n    this._initialized = false;\n    this._channelWatchers = new Map();\n    this._fullWatcher = null;\n    this._gasPreserver = new gas_preserver_GasPreserver();\n  } // --------------------------------------------------------------------------\n\n\n  bot_createClass(Bot, [{\n    key: "init",\n    value: function init(options) {\n      var _this = this;\n\n      this._verbose = options.verbose || false;\n      return keybaseExec({\n        args: [\'oneshot\', \'--username\', options.username, \'--paperkey\', options.paperkey]\n      }).catch(function (err) {\n        return console.log(err);\n      }).then(function () {\n        return getKeybaseUsernameAndDevicename().then(function (currentDPair) {\n          if (currentDPair) {\n            _this._dPair = currentDPair;\n\n            _this._log("intialized ".concat(currentDPair.username, " (device=").concat(currentDPair.devicename, ")"));\n          }\n\n          _this._initialized = true;\n        });\n      });\n    } // --------------------------------------------------------------------------\n\n  }, {\n    key: "chatList",\n    value: function chatList(options) {\n      return this._safelyRunApiCommand({\n        method: \'list\',\n        options: options\n      });\n    } // --------------------------------------------------------------------------\n\n  }, {\n    key: "chatSend",\n    value: function chatSend(options) {\n      var channel = options.channel,\n          message = options.message;\n      return this._safelyRunApiCommand({\n        method: \'send\',\n        options: {\n          channel: channel,\n          message: message\n        }\n      });\n    } // --------------------------------------------------------------------------\n\n  }, {\n    key: "chatRead",\n    value: function chatRead(options) {\n      var channel = options.channel;\n      var peek = false;\n      var unreadOnly = false;\n\n      if (typeof options.peek !== \'undefined\') {\n        peek = options.peek;\n      }\n\n      if (typeof options.unreadOnly !== \'undefined\') {\n        unreadOnly = options.unreadOnly;\n      }\n\n      return this._safelyRunApiCommand({\n        method: \'read\',\n        options: {\n          channel: channel,\n          peek: peek,\n          unreadOnly: unreadOnly\n        }\n      });\n    } // --------------------------------------------------------------------------\n\n  }, {\n    key: "chatDelete",\n    value: function chatDelete(options) {\n      var channel = options.channel,\n          messageId = options.messageId;\n      return this._safelyRunApiCommand({\n        method: \'delete\',\n        options: {\n          channel: channel,\n          messageId: messageId\n        }\n      });\n    } // --------------------------------------------------------------------------\n\n  }, {\n    key: "myInfo",\n    value: function myInfo() {\n      return this._dPair;\n    } // --------------------------------------------------------------------------\n\n  }, {\n    key: "watchChannelForNewMessages",\n    value: function watchChannelForNewMessages(options) {\n      var channel = options.channel,\n          onMessages = options.onMessages;\n      var key = chatChannelToKey(channel);\n\n      if (this._channelWatchers.has(key)) {\n        throw new Error("already watching the channel ".concat(JSON.stringify(channel)));\n      } else {\n        this._channelWatchers.set(key, new ChannelWatcher({\n          channel: channel,\n          onMessages: onMessages,\n          bot: this\n        }));\n      }\n    } // --------------------------------------------------------------------------\n\n  }, {\n    key: "watchAllChannelsForNewMessages",\n    value: function watchAllChannelsForNewMessages(options) {\n      var onMessages = options.onMessages;\n\n      if (this._fullWatcher) {\n        throw new Error("already watching watching; can\'t have 2 message watchers}");\n      } else {\n        this._fullWatcher = new FullWatcher({\n          onMessages: onMessages,\n          bot: this\n        });\n      }\n    } // --------------------------------------------------------------------------\n    // --------------------------------------------------------------------------\n    //  - make sure inited ok\n    //  - make sure user is still the same user since init\n    // --------------------------------------------------------------------------\n\n  }, {\n    key: "_log",\n    value: function _log(msg) {\n      if (this._verbose) {\n        console.log(msg);\n      }\n    }\n  }, {\n    key: "_checkUserAndInit",\n    value: function _checkUserAndInit() {\n      var _this2 = this;\n\n      return new Promise(function (resolve, reject) {\n        getKeybaseUsernameAndDevicename().then(function (currentDPair) {\n          if (!_this2._initialized || !currentDPair || !_this2._dPair || currentDPair.username !== _this2._dPair.username) {\n            reject(new Error("Uh-oh, username has changed or we never initialized correctly."));\n          }\n\n          resolve();\n        });\n      });\n    } // --------------------------------------------------------------------------\n\n  }, {\n    key: "_safelyRunApiCommand",\n    value: function _safelyRunApiCommand(arg) {\n      var _this3 = this;\n\n      return new Promise(function (resolve, reject) {\n        _this3._checkUserAndInit().then(function () {\n          return chat_api_runApiCommand(arg).then(function (res) {\n            resolve(res);\n          }).catch(function (err) {\n            return reject(err);\n          });\n        });\n      });\n    }\n  }]);\n\n  return Bot;\n}();\n\n\n// CONCATENATED MODULE: ./lib/entry.js\n/* concated harmony reexport Bot */__webpack_require__.d(__webpack_exports__, "Bot", function() { return bot_Bot; });\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n')}])});